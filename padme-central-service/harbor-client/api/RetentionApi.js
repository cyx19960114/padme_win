/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Errors', 'model/RetentionExecution', 'model/RetentionExecutionStop', 'model/RetentionExecutionTask', 'model/RetentionExecutionTrigger', 'model/RetentionMetadata', 'model/RetentionPolicy'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Errors'), require('../model/RetentionExecution'), require('../model/RetentionExecutionStop'), require('../model/RetentionExecutionTask'), require('../model/RetentionExecutionTrigger'), require('../model/RetentionMetadata'), require('../model/RetentionPolicy'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.RetentionApi = factory(root.HarborApi.ApiClient, root.HarborApi.Errors, root.HarborApi.RetentionExecution, root.HarborApi.RetentionExecutionStop, root.HarborApi.RetentionExecutionTask, root.HarborApi.RetentionExecutionTrigger, root.HarborApi.RetentionMetadata, root.HarborApi.RetentionPolicy);
  }
}(this, function(ApiClient, Errors, RetentionExecution, RetentionExecutionStop, RetentionExecutionTask, RetentionExecutionTrigger, RetentionMetadata, RetentionPolicy) {
  'use strict';

  /**
   * Retention service.
   * @module api/RetentionApi
   * @version 2.0
   */

  /**
   * Constructs a new RetentionApi. 
   * @alias module:api/RetentionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createRetention operation.
     * @callback module:api/RetentionApi~createRetentionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Retention Policy
     * Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet.
     * @param {module:model/RetentionPolicy} policy Create Retention Policy successfully.
     * @param {module:api/RetentionApi~createRetentionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createRetention = function(policy, callback) {
      var postBody = policy;

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling createRetention");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/retentions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRentenitionMetadata operation.
     * @callback module:api/RetentionApi~getRentenitionMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetentionMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Retention Metadatas
     * Get Retention Metadatas.
     * @param {module:api/RetentionApi~getRentenitionMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetentionMetadata}
     */
    this.getRentenitionMetadata = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = RetentionMetadata;

      return this.apiClient.callApi(
        '/retentions/metadatas', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRetention operation.
     * @callback module:api/RetentionApi~getRetentionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetentionPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Retention Policy
     * Get Retention Policy.
     * @param {Number} id Retention ID.
     * @param {module:api/RetentionApi~getRetentionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetentionPolicy}
     */
    this.getRetention = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRetention");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = RetentionPolicy;

      return this.apiClient.callApi(
        '/retentions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRetentionTaskLog operation.
     * @callback module:api/RetentionApi~getRetentionTaskLogCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Retention job task log
     * Get Retention job task log, tags ratain or deletion detail will be shown in a table.
     * @param {Number} id Retention ID.
     * @param {Number} eid Retention execution ID.
     * @param {Number} tid Retention execution ID.
     * @param {module:api/RetentionApi~getRetentionTaskLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getRetentionTaskLog = function(id, eid, tid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRetentionTaskLog");
      }

      // verify the required parameter 'eid' is set
      if (eid === undefined || eid === null) {
        throw new Error("Missing the required parameter 'eid' when calling getRetentionTaskLog");
      }

      // verify the required parameter 'tid' is set
      if (tid === undefined || tid === null) {
        throw new Error("Missing the required parameter 'tid' when calling getRetentionTaskLog");
      }


      var pathParams = {
        'id': id,
        'eid': eid,
        'tid': tid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/retentions/{id}/executions/{eid}/tasks/{tid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRetentionExecutions operation.
     * @callback module:api/RetentionApi~listRetentionExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RetentionExecution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Retention executions
     * Get Retention executions, execution status may be delayed before job service schedule it up.
     * @param {Number} id Retention ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number.
     * @param {Number} opts.pageSize The size of per page.
     * @param {module:api/RetentionApi~listRetentionExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RetentionExecution>}
     */
    this.listRetentionExecutions = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listRetentionExecutions");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [RetentionExecution];

      return this.apiClient.callApi(
        '/retentions/{id}/executions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRetentionTasks operation.
     * @callback module:api/RetentionApi~listRetentionTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RetentionExecutionTask>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Retention tasks
     * Get Retention tasks, each repository as a task.
     * @param {Number} id Retention ID.
     * @param {Number} eid Retention execution ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number.
     * @param {Number} opts.pageSize The size of per page.
     * @param {module:api/RetentionApi~listRetentionTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RetentionExecutionTask>}
     */
    this.listRetentionTasks = function(id, eid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listRetentionTasks");
      }

      // verify the required parameter 'eid' is set
      if (eid === undefined || eid === null) {
        throw new Error("Missing the required parameter 'eid' when calling listRetentionTasks");
      }


      var pathParams = {
        'id': id,
        'eid': eid
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [RetentionExecutionTask];

      return this.apiClient.callApi(
        '/retentions/{id}/executions/{eid}/tasks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operateRetentionExecution operation.
     * @callback module:api/RetentionApi~operateRetentionExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a Retention execution
     * Stop a Retention execution, only support \"stop\" action now.
     * @param {Number} id Retention ID.
     * @param {Number} eid Retention execution ID.
     * @param {module:model/RetentionExecutionStop} body The action, only support \"stop\" now.
     * @param {module:api/RetentionApi~operateRetentionExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.operateRetentionExecution = function(id, eid, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling operateRetentionExecution");
      }

      // verify the required parameter 'eid' is set
      if (eid === undefined || eid === null) {
        throw new Error("Missing the required parameter 'eid' when calling operateRetentionExecution");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling operateRetentionExecution");
      }


      var pathParams = {
        'id': id,
        'eid': eid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/retentions/{id}/executions/{eid}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerRetentionExecution operation.
     * @callback module:api/RetentionApi~triggerRetentionExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a Retention Execution
     * Trigger a Retention Execution, if dry_run is True, nothing would be deleted actually.
     * @param {Number} id Retention ID.
     * @param {module:model/RetentionExecutionTrigger} body 
     * @param {module:api/RetentionApi~triggerRetentionExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.triggerRetentionExecution = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling triggerRetentionExecution");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling triggerRetentionExecution");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/retentions/{id}/executions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRetention operation.
     * @callback module:api/RetentionApi~updateRetentionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Retention Policy
     * Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.
     * @param {Number} id Retention ID.
     * @param {module:model/RetentionPolicy} policy 
     * @param {module:api/RetentionApi~updateRetentionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateRetention = function(id, policy, callback) {
      var postBody = policy;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRetention");
      }

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling updateRetention");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/retentions/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
