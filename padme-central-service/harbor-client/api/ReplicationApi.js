/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Errors', 'model/ReplicationExecution', 'model/ReplicationTask', 'model/StartReplicationExecution'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Errors'), require('../model/ReplicationExecution'), require('../model/ReplicationTask'), require('../model/StartReplicationExecution'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.ReplicationApi = factory(root.HarborApi.ApiClient, root.HarborApi.Errors, root.HarborApi.ReplicationExecution, root.HarborApi.ReplicationTask, root.HarborApi.StartReplicationExecution);
  }
}(this, function(ApiClient, Errors, ReplicationExecution, ReplicationTask, StartReplicationExecution) {
  'use strict';

  /**
   * Replication service.
   * @module api/ReplicationApi
   * @version 2.0
   */

  /**
   * Constructs a new ReplicationApi. 
   * @alias module:api/ReplicationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getReplicationExecution operation.
     * @callback module:api/ReplicationApi~getReplicationExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specific replication execution
     * Get the replication execution specified by ID
     * @param {Number} id The ID of the execution.
     * @param {module:api/ReplicationApi~getReplicationExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationExecution}
     */
    this.getReplicationExecution = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReplicationExecution");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ReplicationExecution;

      return this.apiClient.callApi(
        '/replication/executions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReplicationLog operation.
     * @callback module:api/ReplicationApi~getReplicationLogCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the log of the specific replication task
     * Get the log of the specific replication task
     * @param {Number} id The ID of the execution that the tasks belongs to.
     * @param {Number} taskId The ID of the task.
     * @param {module:api/ReplicationApi~getReplicationLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getReplicationLog = function(id, taskId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReplicationLog");
      }

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getReplicationLog");
      }


      var pathParams = {
        'id': id,
        'task_id': taskId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/replication/executions/{id}/tasks/{task_id}/log', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listReplicationExecutions operation.
     * @callback module:api/ReplicationApi~listReplicationExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReplicationExecution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List replication executions
     * List replication executions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {Number} opts.policyId The ID of the policy that the executions belong to.
     * @param {String} opts.status The execution status.
     * @param {String} opts.trigger The trigger mode.
     * @param {module:api/ReplicationApi~listReplicationExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReplicationExecution>}
     */
    this.listReplicationExecutions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'policy_id': opts['policyId'],
        'status': opts['status'],
        'trigger': opts['trigger'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [ReplicationExecution];

      return this.apiClient.callApi(
        '/replication/executions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listReplicationTasks operation.
     * @callback module:api/ReplicationApi~listReplicationTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReplicationTask>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List replication tasks for a specific execution
     * List replication tasks for a specific execution
     * @param {Number} id The ID of the execution that the tasks belongs to.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {String} opts.status The task status.
     * @param {String} opts.resourceType The resource type.
     * @param {module:api/ReplicationApi~listReplicationTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReplicationTask>}
     */
    this.listReplicationTasks = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listReplicationTasks");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'status': opts['status'],
        'resource_type': opts['resourceType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [ReplicationTask];

      return this.apiClient.callApi(
        '/replication/executions/{id}/tasks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startReplication operation.
     * @callback module:api/ReplicationApi~startReplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start one replication execution
     * Start one replication execution according to the policy
     * @param {module:model/StartReplicationExecution} execution The ID of policy that the execution belongs to
     * @param {module:api/ReplicationApi~startReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.startReplication = function(execution, callback) {
      var postBody = execution;

      // verify the required parameter 'execution' is set
      if (execution === undefined || execution === null) {
        throw new Error("Missing the required parameter 'execution' when calling startReplication");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/replication/executions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopReplication operation.
     * @callback module:api/ReplicationApi~stopReplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop the specific replication execution
     * Stop the replication execution specified by ID
     * @param {Number} id The ID of the execution.
     * @param {module:api/ReplicationApi~stopReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.stopReplication = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopReplication");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/replication/executions/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
