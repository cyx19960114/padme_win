/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Artifact', 'model/Errors', 'model/Label', 'model/Tag'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Artifact'), require('../model/Errors'), require('../model/Label'), require('../model/Tag'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.ArtifactApi = factory(root.HarborApi.ApiClient, root.HarborApi.Artifact, root.HarborApi.Errors, root.HarborApi.Label, root.HarborApi.Tag);
  }
}(this, function(ApiClient, Artifact, Errors, Label, Tag) {
  'use strict';

  /**
   * Artifact service.
   * @module api/ArtifactApi
   * @version 2.0
   */

  /**
   * Constructs a new ArtifactApi. 
   * @alias module:api/ArtifactApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addLabel operation.
     * @callback module:api/ArtifactApi~addLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add label to artifact
     * Add label to the specified artiact.
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {String} reference The reference of the artifact, can be digest or tag
     * @param {module:model/Label} label The label that added to the artifact. Only the ID property is needed.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/ArtifactApi~addLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLabel = function(projectName, repositoryName, reference, label, opts, callback) {
      opts = opts || {};
      var postBody = label;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling addLabel");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling addLabel");
      }

      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling addLabel");
      }

      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling addLabel");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName,
        'reference': reference
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the copyArtifact operation.
     * @callback module:api/ArtifactApi~copyArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy artifact
     * Copy the artifact specified in the \"from\" parameter to the repository.
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {String} from The artifact from which the new artifact is copied from, the format should be \"project/repository:tag\" or \"project/repository@digest\".
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/ArtifactApi~copyArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.copyArtifact = function(projectName, repositoryName, from, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling copyArtifact");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling copyArtifact");
      }

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling copyArtifact");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName
      };
      var queryParams = {
        'from': from,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}/artifacts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTag operation.
     * @callback module:api/ArtifactApi~createTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create tag
     * Create a tag for the specified artifact
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {String} reference The reference of the artifact, can be digest or tag
     * @param {module:model/Tag} tag The JSON object of tag.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/ArtifactApi~createTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createTag = function(projectName, repositoryName, reference, tag, opts, callback) {
      opts = opts || {};
      var postBody = tag;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling createTag");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling createTag");
      }

      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling createTag");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling createTag");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName,
        'reference': reference
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArtifact operation.
     * @callback module:api/ArtifactApi~deleteArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specific artifact
     * Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {String} reference The reference of the artifact, can be digest or tag
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/ArtifactApi~deleteArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteArtifact = function(projectName, repositoryName, reference, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling deleteArtifact");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling deleteArtifact");
      }

      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling deleteArtifact");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName,
        'reference': reference
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTag operation.
     * @callback module:api/ArtifactApi~deleteTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tag
     * Delete the tag of the specified artifact
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {String} reference The reference of the artifact, can be digest or tag
     * @param {String} tagName The name of the tag
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/ArtifactApi~deleteTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTag = function(projectName, repositoryName, reference, tagName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling deleteTag");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling deleteTag");
      }

      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling deleteTag");
      }

      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling deleteTag");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName,
        'reference': reference,
        'tag_name': tagName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAddition operation.
     * @callback module:api/ArtifactApi~getAdditionCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the addition of the specific artifact
     * Get the addition of the artifact specified by the reference under the project and repository.
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {String} reference The reference of the artifact, can be digest or tag
     * @param {module:model/String} addition The type of addition.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/ArtifactApi~getAdditionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getAddition = function(projectName, repositoryName, reference, addition, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling getAddition");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling getAddition");
      }

      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling getAddition");
      }

      // verify the required parameter 'addition' is set
      if (addition === undefined || addition === null) {
        throw new Error("Missing the required parameter 'addition' when calling getAddition");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName,
        'reference': reference,
        'addition': addition
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArtifact operation.
     * @callback module:api/ArtifactApi~getArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specific artifact
     * Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {String} reference The reference of the artifact, can be digest or tag
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {String} opts.xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1' (default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param {Boolean} opts.withTag Specify whether the tags are inclued inside the returning artifacts (default to true)
     * @param {Boolean} opts.withLabel Specify whether the labels are inclued inside the returning artifacts (default to false)
     * @param {Boolean} opts.withScanOverview Specify whether the scan overview is inclued inside the returning artifacts (default to false)
     * @param {Boolean} opts.withSignature Specify whether the signature is inclued inside the returning artifacts (default to false)
     * @param {Boolean} opts.withImmutableStatus Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \"with_tag=true\" (default to false)
     * @param {module:api/ArtifactApi~getArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    this.getArtifact = function(projectName, repositoryName, reference, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling getArtifact");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling getArtifact");
      }

      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling getArtifact");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName,
        'reference': reference
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'with_tag': opts['withTag'],
        'with_label': opts['withLabel'],
        'with_scan_overview': opts['withScanOverview'],
        'with_signature': opts['withSignature'],
        'with_immutable_status': opts['withImmutableStatus'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId'],
        'X-Accept-Vulnerabilities': opts['xAcceptVulnerabilities']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = Artifact;

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVulnerabilitiesAddition operation.
     * @callback module:api/ArtifactApi~getVulnerabilitiesAdditionCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the vulnerabilities addition of the specific artifact
     * Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {String} reference The reference of the artifact, can be digest or tag
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {String} opts.xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1' (default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param {module:api/ArtifactApi~getVulnerabilitiesAdditionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getVulnerabilitiesAddition = function(projectName, repositoryName, reference, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling getVulnerabilitiesAddition");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling getVulnerabilitiesAddition");
      }

      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling getVulnerabilitiesAddition");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName,
        'reference': reference
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId'],
        'X-Accept-Vulnerabilities': opts['xAcceptVulnerabilities']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listArtifacts operation.
     * @callback module:api/ArtifactApi~listArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Artifact>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List artifacts
     * List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \"q\" includes \"tags=*\" to list only tagged artifacts, \"tags=nil\" to list only untagged artifacts, \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\", \"tags=v\" to list artifact whose tag exactly matches \"v\", \"labels=(id1, id2)\" to list artifacts that both labels with id1 and id2 are added to
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {String} opts.q Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {String} opts.xAcceptVulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1' (default to application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0)
     * @param {Boolean} opts.withTag Specify whether the tags are included inside the returning artifacts (default to true)
     * @param {Boolean} opts.withLabel Specify whether the labels are included inside the returning artifacts (default to false)
     * @param {Boolean} opts.withScanOverview Specify whether the scan overview is included inside the returning artifacts (default to false)
     * @param {Boolean} opts.withSignature Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\" (default to false)
     * @param {Boolean} opts.withImmutableStatus Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\" (default to false)
     * @param {module:api/ArtifactApi~listArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Artifact>}
     */
    this.listArtifacts = function(projectName, repositoryName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling listArtifacts");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling listArtifacts");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName
      };
      var queryParams = {
        'q': opts['q'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'with_tag': opts['withTag'],
        'with_label': opts['withLabel'],
        'with_scan_overview': opts['withScanOverview'],
        'with_signature': opts['withSignature'],
        'with_immutable_status': opts['withImmutableStatus'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId'],
        'X-Accept-Vulnerabilities': opts['xAcceptVulnerabilities']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Artifact];

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}/artifacts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listTags operation.
     * @callback module:api/ArtifactApi~listTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tags
     * List tags of the specific artifact
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {String} reference The reference of the artifact, can be digest or tag
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {String} opts.q Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {Boolean} opts.withSignature Specify whether the signature is included inside the returning tags (default to false)
     * @param {Boolean} opts.withImmutableStatus Specify whether the immutable status is included inside the returning tags (default to false)
     * @param {module:api/ArtifactApi~listTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tag>}
     */
    this.listTags = function(projectName, repositoryName, reference, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling listTags");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling listTags");
      }

      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling listTags");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName,
        'reference': reference
      };
      var queryParams = {
        'q': opts['q'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'with_signature': opts['withSignature'],
        'with_immutable_status': opts['withImmutableStatus'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Tag];

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeLabel operation.
     * @callback module:api/ArtifactApi~removeLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove label from artifact
     * Remove the label from the specified artiact.
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {String} reference The reference of the artifact, can be digest or tag
     * @param {Number} labelId The ID of the label that removed from the artifact.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/ArtifactApi~removeLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeLabel = function(projectName, repositoryName, reference, labelId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling removeLabel");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling removeLabel");
      }

      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling removeLabel");
      }

      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling removeLabel");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName,
        'reference': reference,
        'label_id': labelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
