/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CVEAllowlist', 'model/CliSecretInput', 'model/Configurations', 'model/ConfigurationsResponse', 'model/EmailServerSetting', 'model/ImmutableRule', 'model/Label', 'model/LdapConf', 'model/LdapFailedImportUsers', 'model/LdapImportUsers', 'model/LdapUsers', 'model/Namespace', 'model/OverallHealthStatus', 'model/Password', 'model/Permission', 'model/PingEndpoint', 'model/ProjectMember', 'model/ProjectMemberEntity', 'model/ProjectMetadata', 'model/PutRegistry', 'model/Quota', 'model/QuotaUpdateReq', 'model/Registry', 'model/RegistryInfo', 'model/ReplicationPolicy', 'model/RoleRequest', 'model/ScannerAdapterMetadata', 'model/ScannerRegistration', 'model/ScannerRegistrationSettings', 'model/Search', 'model/StatisticMap', 'model/SupportedWebhookEventTypes', 'model/SysAdminFlag', 'model/User', 'model/UserGroup', 'model/UserProfile', 'model/UserSearch', 'model/WebhookJob', 'model/WebhookLastTrigger', 'model/WebhookPolicy'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CVEAllowlist'), require('../model/CliSecretInput'), require('../model/Configurations'), require('../model/ConfigurationsResponse'), require('../model/EmailServerSetting'), require('../model/ImmutableRule'), require('../model/Label'), require('../model/LdapConf'), require('../model/LdapFailedImportUsers'), require('../model/LdapImportUsers'), require('../model/LdapUsers'), require('../model/Namespace'), require('../model/OverallHealthStatus'), require('../model/Password'), require('../model/Permission'), require('../model/PingEndpoint'), require('../model/ProjectMember'), require('../model/ProjectMemberEntity'), require('../model/ProjectMetadata'), require('../model/PutRegistry'), require('../model/Quota'), require('../model/QuotaUpdateReq'), require('../model/Registry'), require('../model/RegistryInfo'), require('../model/ReplicationPolicy'), require('../model/RoleRequest'), require('../model/ScannerAdapterMetadata'), require('../model/ScannerRegistration'), require('../model/ScannerRegistrationSettings'), require('../model/Search'), require('../model/StatisticMap'), require('../model/SupportedWebhookEventTypes'), require('../model/SysAdminFlag'), require('../model/User'), require('../model/UserGroup'), require('../model/UserProfile'), require('../model/UserSearch'), require('../model/WebhookJob'), require('../model/WebhookLastTrigger'), require('../model/WebhookPolicy'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.ProductsApi = factory(root.HarborApi.ApiClient, root.HarborApi.CVEAllowlist, root.HarborApi.CliSecretInput, root.HarborApi.Configurations, root.HarborApi.ConfigurationsResponse, root.HarborApi.EmailServerSetting, root.HarborApi.ImmutableRule, root.HarborApi.Label, root.HarborApi.LdapConf, root.HarborApi.LdapFailedImportUsers, root.HarborApi.LdapImportUsers, root.HarborApi.LdapUsers, root.HarborApi.Namespace, root.HarborApi.OverallHealthStatus, root.HarborApi.Password, root.HarborApi.Permission, root.HarborApi.PingEndpoint, root.HarborApi.ProjectMember, root.HarborApi.ProjectMemberEntity, root.HarborApi.ProjectMetadata, root.HarborApi.PutRegistry, root.HarborApi.Quota, root.HarborApi.QuotaUpdateReq, root.HarborApi.Registry, root.HarborApi.RegistryInfo, root.HarborApi.ReplicationPolicy, root.HarborApi.RoleRequest, root.HarborApi.ScannerAdapterMetadata, root.HarborApi.ScannerRegistration, root.HarborApi.ScannerRegistrationSettings, root.HarborApi.Search, root.HarborApi.StatisticMap, root.HarborApi.SupportedWebhookEventTypes, root.HarborApi.SysAdminFlag, root.HarborApi.User, root.HarborApi.UserGroup, root.HarborApi.UserProfile, root.HarborApi.UserSearch, root.HarborApi.WebhookJob, root.HarborApi.WebhookLastTrigger, root.HarborApi.WebhookPolicy);
  }
}(this, function(ApiClient, CVEAllowlist, CliSecretInput, Configurations, ConfigurationsResponse, EmailServerSetting, ImmutableRule, Label, LdapConf, LdapFailedImportUsers, LdapImportUsers, LdapUsers, Namespace, OverallHealthStatus, Password, Permission, PingEndpoint, ProjectMember, ProjectMemberEntity, ProjectMetadata, PutRegistry, Quota, QuotaUpdateReq, Registry, RegistryInfo, ReplicationPolicy, RoleRequest, ScannerAdapterMetadata, ScannerRegistration, ScannerRegistrationSettings, Search, StatisticMap, SupportedWebhookEventTypes, SysAdminFlag, User, UserGroup, UserProfile, UserSearch, WebhookJob, WebhookLastTrigger, WebhookPolicy) {
  'use strict';

  /**
   * Products service.
   * @module api/ProductsApi
   * @version 2.0
   */

  /**
   * Constructs a new ProductsApi. 
   * @alias module:api/ProductsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the chartrepoRepoChartsNameVersionLabelsGet operation.
     * @callback module:api/ProductsApi~chartrepoRepoChartsNameVersionLabelsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the attahced labels of chart.
     * Return the attahced labels of the specified chart version.
     * @param {String} repo The project name
     * @param {String} name The chart name
     * @param {String} version The chart version
     * @param {module:api/ProductsApi~chartrepoRepoChartsNameVersionLabelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.chartrepoRepoChartsNameVersionLabelsGet = function(repo, name, version, callback) {
      var postBody = null;

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameVersionLabelsGet");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling chartrepoRepoChartsNameVersionLabelsGet");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling chartrepoRepoChartsNameVersionLabelsGet");
      }


      var pathParams = {
        'repo': repo,
        'name': name,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/chartrepo/{repo}/charts/{name}/{version}/labels', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the chartrepoRepoChartsNameVersionLabelsIdDelete operation.
     * @callback module:api/ProductsApi~chartrepoRepoChartsNameVersionLabelsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove label from chart.
     * Remove label from the specified chart version.
     * @param {String} repo The project name
     * @param {String} name The chart name
     * @param {String} version The chart version
     * @param {Number} id The label ID
     * @param {module:api/ProductsApi~chartrepoRepoChartsNameVersionLabelsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.chartrepoRepoChartsNameVersionLabelsIdDelete = function(repo, name, version, id, callback) {
      var postBody = null;

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameVersionLabelsIdDelete");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling chartrepoRepoChartsNameVersionLabelsIdDelete");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling chartrepoRepoChartsNameVersionLabelsIdDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling chartrepoRepoChartsNameVersionLabelsIdDelete");
      }


      var pathParams = {
        'repo': repo,
        'name': name,
        'version': version,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/chartrepo/{repo}/charts/{name}/{version}/labels/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the chartrepoRepoChartsNameVersionLabelsPost operation.
     * @callback module:api/ProductsApi~chartrepoRepoChartsNameVersionLabelsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark label to chart.
     * Mark label to the specified chart version.
     * @param {String} repo The project name
     * @param {String} name The chart name
     * @param {String} version The chart version
     * @param {module:model/Label} label The label being marked to the chart version
     * @param {module:api/ProductsApi~chartrepoRepoChartsNameVersionLabelsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.chartrepoRepoChartsNameVersionLabelsPost = function(repo, name, version, label, callback) {
      var postBody = label;

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameVersionLabelsPost");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling chartrepoRepoChartsNameVersionLabelsPost");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling chartrepoRepoChartsNameVersionLabelsPost");
      }

      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling chartrepoRepoChartsNameVersionLabelsPost");
      }


      var pathParams = {
        'repo': repo,
        'name': name,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/chartrepo/{repo}/charts/{name}/{version}/labels', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationsGet operation.
     * @callback module:api/ProductsApi~configurationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get system configurations.
     * This endpoint is for retrieving system configurations that only provides for admin user. 
     * @param {module:api/ProductsApi~configurationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationsResponse}
     */
    this.configurationsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ConfigurationsResponse;

      return this.apiClient.callApi(
        '/configurations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationsPut operation.
     * @callback module:api/ProductsApi~configurationsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify system configurations.
     * This endpoint is for modifying system configurations that only provides for admin user. 
     * @param {module:model/Configurations} configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated.
     * @param {module:api/ProductsApi~configurationsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configurationsPut = function(configurations, callback) {
      var postBody = configurations;

      // verify the required parameter 'configurations' is set
      if (configurations === undefined || configurations === null) {
        throw new Error("Missing the required parameter 'configurations' when calling configurationsPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/configurations', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the emailPingPost operation.
     * @callback module:api/ProductsApi~emailPingPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test connection and authentication with email server.
     * Test connection and authentication with email server. 
     * @param {Object} opts Optional parameters
     * @param {module:model/EmailServerSetting} opts.settings Email server settings, if some of the settings are not assigned, they will be read from system configuration.
     * @param {module:api/ProductsApi~emailPingPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.emailPingPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['settings'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/email/ping', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the healthGet operation.
     * @callback module:api/ProductsApi~healthGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverallHealthStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health check API
     * The endpoint returns the health stauts of the system. 
     * @param {module:api/ProductsApi~healthGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverallHealthStatus}
     */
    this.healthGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OverallHealthStatus;

      return this.apiClient.callApi(
        '/health', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the labelsGet operation.
     * @callback module:api/ProductsApi~labelsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labels according to the query strings.
     * This endpoint let user list labels by name, scope and project_id 
     * @param {String} scope The label scope. Valid values are g and p. g for global labels and p for project labels.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The label name.
     * @param {Number} opts.projectId Relevant project ID, required when scope is p.
     * @param {Number} opts.page The page number.
     * @param {Number} opts.pageSize The size of per page.
     * @param {module:api/ProductsApi~labelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    this.labelsGet = function(scope, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling labelsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'scope': scope,
        'project_id': opts['projectId'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Label];

      return this.apiClient.callApi(
        '/labels', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the labelsIdDelete operation.
     * @callback module:api/ProductsApi~labelsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the label specified by ID.
     * Delete the label specified by ID. 
     * @param {Number} id Label ID
     * @param {module:api/ProductsApi~labelsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.labelsIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling labelsIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/labels/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the labelsIdGet operation.
     * @callback module:api/ProductsApi~labelsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the label specified by ID.
     * This endpoint let user get the label by specific ID. 
     * @param {Number} id Label ID
     * @param {module:api/ProductsApi~labelsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    this.labelsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling labelsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = Label;

      return this.apiClient.callApi(
        '/labels/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the labelsIdPut operation.
     * @callback module:api/ProductsApi~labelsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the label properties.
     * This endpoint let user update label properties. 
     * @param {Number} id Label ID
     * @param {module:model/Label} label The updated label json object.
     * @param {module:api/ProductsApi~labelsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.labelsIdPut = function(id, label, callback) {
      var postBody = label;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling labelsIdPut");
      }

      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling labelsIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/labels/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the labelsPost operation.
     * @callback module:api/ProductsApi~labelsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post creates a label
     * This endpoint let user creates a label. 
     * @param {module:model/Label} label The json object of label.
     * @param {module:api/ProductsApi~labelsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.labelsPost = function(label, callback) {
      var postBody = label;

      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling labelsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/labels', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ldapGroupsSearchGet operation.
     * @callback module:api/ProductsApi~ldapGroupsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search available ldap groups.
     * This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupname Ldap group name
     * @param {String} opts.groupdn The LDAP group DN
     * @param {module:api/ProductsApi~ldapGroupsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserGroup>}
     */
    this.ldapGroupsSearchGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'groupname': opts['groupname'],
        'groupdn': opts['groupdn'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [UserGroup];

      return this.apiClient.callApi(
        '/ldap/groups/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ldapPingPost operation.
     * @callback module:api/ProductsApi~ldapPingPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping available ldap service.
     * This endpoint ping the available ldap service for test related configuration parameters. 
     * @param {Object} opts Optional parameters
     * @param {module:model/LdapConf} opts.ldapconf ldap configuration. support input ldap service configuration. If it's a empty request, will load current configuration from the system.
     * @param {module:api/ProductsApi~ldapPingPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.ldapPingPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['ldapconf'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ldap/ping', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ldapUsersImportPost operation.
     * @callback module:api/ProductsApi~ldapUsersImportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import selected available ldap users.
     * This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason. 
     * @param {module:model/LdapImportUsers} uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system.
     * @param {module:api/ProductsApi~ldapUsersImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.ldapUsersImportPost = function(uidList, callback) {
      var postBody = uidList;

      // verify the required parameter 'uidList' is set
      if (uidList === undefined || uidList === null) {
        throw new Error("Missing the required parameter 'uidList' when calling ldapUsersImportPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ldap/users/import', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ldapUsersSearchGet operation.
     * @callback module:api/ProductsApi~ldapUsersSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LdapUsers>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search available ldap users.
     * This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.username Registered user ID
     * @param {module:api/ProductsApi~ldapUsersSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LdapUsers>}
     */
    this.ldapUsersSearchGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'username': opts['username'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [LdapUsers];

      return this.apiClient.callApi(
        '/ldap/users/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdImmutabletagrulesGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdImmutabletagrulesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImmutableRule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all immutable tag rules of current project
     * This endpoint returns the immutable tag rules of a project 
     * @param {Number} projectId Relevant project ID.
     * @param {module:api/ProductsApi~projectsProjectIdImmutabletagrulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImmutableRule>}
     */
    this.projectsProjectIdImmutabletagrulesGet = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdImmutabletagrulesGet");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [ImmutableRule];

      return this.apiClient.callApi(
        '/projects/{project_id}/immutabletagrules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdImmutabletagrulesIdDelete operation.
     * @callback module:api/ProductsApi~projectsProjectIdImmutabletagrulesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the immutable tag rule.
     * @param {Number} projectId Relevant project ID.
     * @param {Number} id Immutable tag rule ID.
     * @param {module:api/ProductsApi~projectsProjectIdImmutabletagrulesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdImmutabletagrulesIdDelete = function(projectId, id, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdImmutabletagrulesIdDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsProjectIdImmutabletagrulesIdDelete");
      }


      var pathParams = {
        'project_id': projectId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/immutabletagrules/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdImmutabletagrulesIdPut operation.
     * @callback module:api/ProductsApi~projectsProjectIdImmutabletagrulesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the immutable tag rule or enable or disable the rule
     * @param {Number} projectId Relevant project ID.
     * @param {Number} id Immutable tag rule ID.
     * @param {module:model/ImmutableRule} immutableRule 
     * @param {module:api/ProductsApi~projectsProjectIdImmutabletagrulesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdImmutabletagrulesIdPut = function(projectId, id, immutableRule, callback) {
      var postBody = immutableRule;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdImmutabletagrulesIdPut");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectsProjectIdImmutabletagrulesIdPut");
      }

      // verify the required parameter 'immutableRule' is set
      if (immutableRule === undefined || immutableRule === null) {
        throw new Error("Missing the required parameter 'immutableRule' when calling projectsProjectIdImmutabletagrulesIdPut");
      }


      var pathParams = {
        'project_id': projectId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/immutabletagrules/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdImmutabletagrulesPost operation.
     * @callback module:api/ProductsApi~projectsProjectIdImmutabletagrulesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an immutable tag rule to current project
     * This endpoint add an immutable tag rule to the project 
     * @param {Number} projectId Relevant project ID.
     * @param {module:model/ImmutableRule} immutableRule 
     * @param {module:api/ProductsApi~projectsProjectIdImmutabletagrulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdImmutabletagrulesPost = function(projectId, immutableRule, callback) {
      var postBody = immutableRule;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdImmutabletagrulesPost");
      }

      // verify the required parameter 'immutableRule' is set
      if (immutableRule === undefined || immutableRule === null) {
        throw new Error("Missing the required parameter 'immutableRule' when calling projectsProjectIdImmutabletagrulesPost");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/immutabletagrules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdMembersGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectMemberEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all project member information
     * Get all project member information
     * @param {Number} projectId Relevant project ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.entityname The entity name to search.
     * @param {module:api/ProductsApi~projectsProjectIdMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectMemberEntity>}
     */
    this.projectsProjectIdMembersGet = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdMembersGet");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'entityname': opts['entityname'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [ProjectMemberEntity];

      return this.apiClient.callApi(
        '/projects/{project_id}/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdMembersMidDelete operation.
     * @callback module:api/ProductsApi~projectsProjectIdMembersMidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project member
     * @param {Number} projectId Relevant project ID.
     * @param {Number} mid Member ID.
     * @param {module:api/ProductsApi~projectsProjectIdMembersMidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdMembersMidDelete = function(projectId, mid, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdMembersMidDelete");
      }

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling projectsProjectIdMembersMidDelete");
      }


      var pathParams = {
        'project_id': projectId,
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/members/{mid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdMembersMidGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdMembersMidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectMemberEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the project member information
     * Get the project member information
     * @param {Number} projectId Relevant project ID.
     * @param {Number} mid The member ID
     * @param {module:api/ProductsApi~projectsProjectIdMembersMidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectMemberEntity}
     */
    this.projectsProjectIdMembersMidGet = function(projectId, mid, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdMembersMidGet");
      }

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling projectsProjectIdMembersMidGet");
      }


      var pathParams = {
        'project_id': projectId,
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ProjectMemberEntity;

      return this.apiClient.callApi(
        '/projects/{project_id}/members/{mid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdMembersMidPut operation.
     * @callback module:api/ProductsApi~projectsProjectIdMembersMidPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project member
     * Update project member relationship
     * @param {Number} projectId Relevant project ID.
     * @param {Number} mid Member ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleRequest} opts.role 
     * @param {module:api/ProductsApi~projectsProjectIdMembersMidPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdMembersMidPut = function(projectId, mid, opts, callback) {
      opts = opts || {};
      var postBody = opts['role'];

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdMembersMidPut");
      }

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling projectsProjectIdMembersMidPut");
      }


      var pathParams = {
        'project_id': projectId,
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/members/{mid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdMembersPost operation.
     * @callback module:api/ProductsApi~projectsProjectIdMembersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project member
     * Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group's id,  If does not exist, it will SearchAndOnBoard the group. 
     * @param {Number} projectId Relevant project ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectMember} opts.projectMember 
     * @param {module:api/ProductsApi~projectsProjectIdMembersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdMembersPost = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = opts['projectMember'];

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdMembersPost");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/members', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdMetadatasGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdMetadatasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project metadata.
     * This endpoint returns metadata of the project specified by project ID. 
     * @param {Number} projectId The ID of project.
     * @param {module:api/ProductsApi~projectsProjectIdMetadatasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectMetadata}
     */
    this.projectsProjectIdMetadatasGet = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdMetadatasGet");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ProjectMetadata;

      return this.apiClient.callApi(
        '/projects/{project_id}/metadatas', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdMetadatasMetaNameDelete operation.
     * @callback module:api/ProductsApi~projectsProjectIdMetadatasMetaNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete metadata of a project
     * This endpoint is aimed to delete metadata of a project. 
     * @param {Number} projectId The ID of project.
     * @param {String} metaName The name of metadat.
     * @param {module:api/ProductsApi~projectsProjectIdMetadatasMetaNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdMetadatasMetaNameDelete = function(projectId, metaName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdMetadatasMetaNameDelete");
      }

      // verify the required parameter 'metaName' is set
      if (metaName === undefined || metaName === null) {
        throw new Error("Missing the required parameter 'metaName' when calling projectsProjectIdMetadatasMetaNameDelete");
      }


      var pathParams = {
        'project_id': projectId,
        'meta_name': metaName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/metadatas/{meta_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdMetadatasMetaNameGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdMetadatasMetaNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project metadata
     * This endpoint returns specified metadata of a project. 
     * @param {Number} projectId Project ID for filtering results.
     * @param {String} metaName The name of metadat.
     * @param {module:api/ProductsApi~projectsProjectIdMetadatasMetaNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectMetadata}
     */
    this.projectsProjectIdMetadatasMetaNameGet = function(projectId, metaName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdMetadatasMetaNameGet");
      }

      // verify the required parameter 'metaName' is set
      if (metaName === undefined || metaName === null) {
        throw new Error("Missing the required parameter 'metaName' when calling projectsProjectIdMetadatasMetaNameGet");
      }


      var pathParams = {
        'project_id': projectId,
        'meta_name': metaName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ProjectMetadata;

      return this.apiClient.callApi(
        '/projects/{project_id}/metadatas/{meta_name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdMetadatasMetaNamePut operation.
     * @callback module:api/ProductsApi~projectsProjectIdMetadatasMetaNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update metadata of a project.
     * This endpoint is aimed to update the metadata of a project. 
     * @param {Number} projectId The ID of project.
     * @param {String} metaName The name of metadat.
     * @param {module:api/ProductsApi~projectsProjectIdMetadatasMetaNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdMetadatasMetaNamePut = function(projectId, metaName, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdMetadatasMetaNamePut");
      }

      // verify the required parameter 'metaName' is set
      if (metaName === undefined || metaName === null) {
        throw new Error("Missing the required parameter 'metaName' when calling projectsProjectIdMetadatasMetaNamePut");
      }


      var pathParams = {
        'project_id': projectId,
        'meta_name': metaName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/metadatas/{meta_name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdMetadatasPost operation.
     * @callback module:api/ProductsApi~projectsProjectIdMetadatasPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add metadata for the project.
     * This endpoint is aimed to add metadata of a project. 
     * @param {Number} projectId Selected project ID.
     * @param {module:model/ProjectMetadata} metadata The metadata of project.
     * @param {module:api/ProductsApi~projectsProjectIdMetadatasPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdMetadatasPost = function(projectId, metadata, callback) {
      var postBody = metadata;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdMetadatasPost");
      }

      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling projectsProjectIdMetadatasPost");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/metadatas', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdScannerCandidatesGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdScannerCandidatesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScannerRegistration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scanner registration candidates for configurating project level scanner
     * Retrieve the system configured scanner registrations as candidates of setting project level scanner. 
     * @param {Number} projectId The project identifier.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number.
     * @param {Number} opts.pageSize The size of per page.
     * @param {module:api/ProductsApi~projectsProjectIdScannerCandidatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScannerRegistration>}
     */
    this.projectsProjectIdScannerCandidatesGet = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdScannerCandidatesGet");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [ScannerRegistration];

      return this.apiClient.callApi(
        '/projects/{project_id}/scanner/candidates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdScannerGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdScannerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScannerRegistration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project level scanner
     * Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.
     * @param {Number} projectId The project identifier.
     * @param {module:api/ProductsApi~projectsProjectIdScannerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScannerRegistration}
     */
    this.projectsProjectIdScannerGet = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdScannerGet");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ScannerRegistration;

      return this.apiClient.callApi(
        '/projects/{project_id}/scanner', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdWebhookEventsGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdWebhookEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportedWebhookEventTypes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get supported event types and notify types.
     * Get supportted event types and notify types.
     * @param {Number} projectId Relevant project ID.
     * @param {module:api/ProductsApi~projectsProjectIdWebhookEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportedWebhookEventTypes}
     */
    this.projectsProjectIdWebhookEventsGet = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookEventsGet");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = SupportedWebhookEventTypes;

      return this.apiClient.callApi(
        '/projects/{project_id}/webhook/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdWebhookJobsGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdWebhookJobsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WebhookJob>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project webhook jobs
     * This endpoint returns webhook jobs of a project. 
     * @param {Number} projectId Relevant project ID.
     * @param {Number} policyId The policy ID.
     * @param {module:api/ProductsApi~projectsProjectIdWebhookJobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WebhookJob>}
     */
    this.projectsProjectIdWebhookJobsGet = function(projectId, policyId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookJobsGet");
      }

      // verify the required parameter 'policyId' is set
      if (policyId === undefined || policyId === null) {
        throw new Error("Missing the required parameter 'policyId' when calling projectsProjectIdWebhookJobsGet");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'policy_id': policyId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [WebhookJob];

      return this.apiClient.callApi(
        '/projects/{project_id}/webhook/jobs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdWebhookLasttriggerGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdWebhookLasttriggerGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WebhookLastTrigger>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project webhook policy last trigger info
     * This endpoint returns last trigger information of project webhook policy. 
     * @param {Number} projectId Relevant project ID.
     * @param {module:api/ProductsApi~projectsProjectIdWebhookLasttriggerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WebhookLastTrigger>}
     */
    this.projectsProjectIdWebhookLasttriggerGet = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookLasttriggerGet");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [WebhookLastTrigger];

      return this.apiClient.callApi(
        '/projects/{project_id}/webhook/lasttrigger', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdWebhookPoliciesGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdWebhookPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WebhookPolicy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project webhook policies.
     * This endpoint returns webhook policies of a project. 
     * @param {Number} projectId Relevant project ID.
     * @param {module:api/ProductsApi~projectsProjectIdWebhookPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WebhookPolicy>}
     */
    this.projectsProjectIdWebhookPoliciesGet = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesGet");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [WebhookPolicy];

      return this.apiClient.callApi(
        '/projects/{project_id}/webhook/policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdWebhookPoliciesPolicyIdDelete operation.
     * @callback module:api/ProductsApi~projectsProjectIdWebhookPoliciesPolicyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete webhook policy of a project
     * This endpoint is aimed to delete webhookpolicy of a project. 
     * @param {Number} projectId Relevant project ID.
     * @param {Number} policyId The id of webhook policy.
     * @param {module:api/ProductsApi~projectsProjectIdWebhookPoliciesPolicyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdWebhookPoliciesPolicyIdDelete = function(projectId, policyId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesPolicyIdDelete");
      }

      // verify the required parameter 'policyId' is set
      if (policyId === undefined || policyId === null) {
        throw new Error("Missing the required parameter 'policyId' when calling projectsProjectIdWebhookPoliciesPolicyIdDelete");
      }


      var pathParams = {
        'project_id': projectId,
        'policy_id': policyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/webhook/policies/{policy_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdWebhookPoliciesPolicyIdGet operation.
     * @callback module:api/ProductsApi~projectsProjectIdWebhookPoliciesPolicyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project webhook policy
     * This endpoint returns specified webhook policy of a project. 
     * @param {Number} projectId Relevant project ID.
     * @param {Number} policyId The id of webhook policy.
     * @param {module:api/ProductsApi~projectsProjectIdWebhookPoliciesPolicyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookPolicy}
     */
    this.projectsProjectIdWebhookPoliciesPolicyIdGet = function(projectId, policyId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesPolicyIdGet");
      }

      // verify the required parameter 'policyId' is set
      if (policyId === undefined || policyId === null) {
        throw new Error("Missing the required parameter 'policyId' when calling projectsProjectIdWebhookPoliciesPolicyIdGet");
      }


      var pathParams = {
        'project_id': projectId,
        'policy_id': policyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = WebhookPolicy;

      return this.apiClient.callApi(
        '/projects/{project_id}/webhook/policies/{policy_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdWebhookPoliciesPolicyIdPut operation.
     * @callback module:api/ProductsApi~projectsProjectIdWebhookPoliciesPolicyIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update webhook policy of a project.
     * This endpoint is aimed to update the webhook policy of a project. 
     * @param {Number} projectId Relevant project ID.
     * @param {Number} policyId The id of webhook policy.
     * @param {module:model/WebhookPolicy} policy All properties needed except \"id\", \"project_id\", \"creation_time\", \"update_time\".
     * @param {module:api/ProductsApi~projectsProjectIdWebhookPoliciesPolicyIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdWebhookPoliciesPolicyIdPut = function(projectId, policyId, policy, callback) {
      var postBody = policy;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesPolicyIdPut");
      }

      // verify the required parameter 'policyId' is set
      if (policyId === undefined || policyId === null) {
        throw new Error("Missing the required parameter 'policyId' when calling projectsProjectIdWebhookPoliciesPolicyIdPut");
      }

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling projectsProjectIdWebhookPoliciesPolicyIdPut");
      }


      var pathParams = {
        'project_id': projectId,
        'policy_id': policyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/webhook/policies/{policy_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdWebhookPoliciesPost operation.
     * @callback module:api/ProductsApi~projectsProjectIdWebhookPoliciesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project webhook policy.
     * This endpoint create a webhook policy if the project does not have one. 
     * @param {Number} projectId Relevant project ID
     * @param {module:model/WebhookPolicy} policy Properties \"targets\" and \"event_types\" needed.
     * @param {module:api/ProductsApi~projectsProjectIdWebhookPoliciesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdWebhookPoliciesPost = function(projectId, policy, callback) {
      var postBody = policy;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesPost");
      }

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling projectsProjectIdWebhookPoliciesPost");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/webhook/policies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdWebhookPoliciesTestPost operation.
     * @callback module:api/ProductsApi~projectsProjectIdWebhookPoliciesTestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test project webhook connection
     * This endpoint tests webhook connection of a project. 
     * @param {Number} projectId Relevant project ID.
     * @param {module:model/WebhookPolicy} policy Only property \"targets\" needed.
     * @param {module:api/ProductsApi~projectsProjectIdWebhookPoliciesTestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdWebhookPoliciesTestPost = function(projectId, policy, callback) {
      var postBody = policy;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesTestPost");
      }

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling projectsProjectIdWebhookPoliciesTestPost");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/webhook/policies/test', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quotasGet operation.
     * @callback module:api/ProductsApi~quotasGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Quota>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List quotas
     * List quotas
     * @param {Object} opts Optional parameters
     * @param {String} opts.reference The reference type of quota.
     * @param {String} opts.referenceId The reference id of quota.
     * @param {String} opts.sort Sort method, valid values include: 'hard.resource_name', '-hard.resource_name', 'used.resource_name', '-used.resource_name'. Here '-' stands for descending order, resource_name should be the real resource name of the quota. 
     * @param {Number} opts.page The page number, default is 1.
     * @param {Number} opts.pageSize The size of per page, default is 10, maximum is 100.
     * @param {module:api/ProductsApi~quotasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Quota>}
     */
    this.quotasGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'reference': opts['reference'],
        'reference_id': opts['referenceId'],
        'sort': opts['sort'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Quota];

      return this.apiClient.callApi(
        '/quotas', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quotasIdGet operation.
     * @callback module:api/ProductsApi~quotasIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quota} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specified quota
     * Get the specified quota
     * @param {Number} id Quota ID
     * @param {module:api/ProductsApi~quotasIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quota}
     */
    this.quotasIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quotasIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = Quota;

      return this.apiClient.callApi(
        '/quotas/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quotasIdPut operation.
     * @callback module:api/ProductsApi~quotasIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the specified quota
     * Update hard limits of the specified quota
     * @param {Number} id Quota ID
     * @param {module:model/QuotaUpdateReq} hard The new hard limits for the quota
     * @param {module:api/ProductsApi~quotasIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.quotasIdPut = function(id, hard, callback) {
      var postBody = hard;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quotasIdPut");
      }

      // verify the required parameter 'hard' is set
      if (hard === undefined || hard === null) {
        throw new Error("Missing the required parameter 'hard' when calling quotasIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotas/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registriesGet operation.
     * @callback module:api/ProductsApi~registriesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Registry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List registries.
     * List registries according to the query. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Deprecated, use `q` instead.
     * @param {String} opts.q Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @param {module:api/ProductsApi~registriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Registry>}
     */
    this.registriesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'q': opts['q'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Registry];

      return this.apiClient.callApi(
        '/registries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registriesIdDelete operation.
     * @callback module:api/ProductsApi~registriesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete specific registry.
     * This endpoint is for to delete specific registry. 
     * @param {Number} id The registry's ID.
     * @param {module:api/ProductsApi~registriesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.registriesIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registriesIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registries/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registriesIdGet operation.
     * @callback module:api/ProductsApi~registriesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Registry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get registry.
     * This endpoint is for get specific registry.
     * @param {Number} id The registry ID.
     * @param {module:api/ProductsApi~registriesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Registry}
     */
    this.registriesIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registriesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = Registry;

      return this.apiClient.callApi(
        '/registries/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registriesIdInfoGet operation.
     * @callback module:api/ProductsApi~registriesIdInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get registry info.
     * Get the info of one specific registry.
     * @param {Number} id The registry ID.
     * @param {module:api/ProductsApi~registriesIdInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistryInfo}
     */
    this.registriesIdInfoGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registriesIdInfoGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = RegistryInfo;

      return this.apiClient.callApi(
        '/registries/{id}/info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registriesIdNamespaceGet operation.
     * @callback module:api/ProductsApi~registriesIdNamespaceGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Namespace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List namespaces of registry
     * This endpoint let user list namespaces of registry according to query. 
     * @param {Number} id The registry ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The name of namespace.
     * @param {module:api/ProductsApi~registriesIdNamespaceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Namespace>}
     */
    this.registriesIdNamespaceGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registriesIdNamespaceGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Namespace];

      return this.apiClient.callApi(
        '/registries/{id}/namespace', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registriesIdPut operation.
     * @callback module:api/ProductsApi~registriesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a given registry.
     * This endpoint is for update a given registry. 
     * @param {Number} id The registry's ID.
     * @param {module:model/PutRegistry} repoTarget Updates registry.
     * @param {module:api/ProductsApi~registriesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.registriesIdPut = function(id, repoTarget, callback) {
      var postBody = repoTarget;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registriesIdPut");
      }

      // verify the required parameter 'repoTarget' is set
      if (repoTarget === undefined || repoTarget === null) {
        throw new Error("Missing the required parameter 'repoTarget' when calling registriesIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registries/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registriesPingPost operation.
     * @callback module:api/ProductsApi~registriesPingPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping status of a registry.
     * This endpoint checks status of a registry, the registry can be given by ID or URL (together with credential) 
     * @param {module:model/Registry} registry Registry to ping.
     * @param {module:api/ProductsApi~registriesPingPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.registriesPingPost = function(registry, callback) {
      var postBody = registry;

      // verify the required parameter 'registry' is set
      if (registry === undefined || registry === null) {
        throw new Error("Missing the required parameter 'registry' when calling registriesPingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registries/ping', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registriesPost operation.
     * @callback module:api/ProductsApi~registriesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new registry.
     * This endpoint is for user to create a new registry. 
     * @param {module:model/Registry} registry New created registry.
     * @param {module:api/ProductsApi~registriesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.registriesPost = function(registry, callback) {
      var postBody = registry;

      // verify the required parameter 'registry' is set
      if (registry === undefined || registry === null) {
        throw new Error("Missing the required parameter 'registry' when calling registriesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registries', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationAdaptersGet operation.
     * @callback module:api/ProductsApi~replicationAdaptersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List supported adapters.
     * This endpoint let user list supported adapters. 
     * @param {module:api/ProductsApi~replicationAdaptersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.replicationAdaptersGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/replication/adapters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationPoliciesGet operation.
     * @callback module:api/ProductsApi~replicationPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReplicationPolicy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List replication policies
     * This endpoint let user list replication policies 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The replication policy name.
     * @param {Number} opts.page The page number.
     * @param {Number} opts.pageSize The size of per page.
     * @param {module:api/ProductsApi~replicationPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReplicationPolicy>}
     */
    this.replicationPoliciesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [ReplicationPolicy];

      return this.apiClient.callApi(
        '/replication/policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationPoliciesIdDelete operation.
     * @callback module:api/ProductsApi~replicationPoliciesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the replication policy specified by ID.
     * Delete the replication policy specified by ID. 
     * @param {Number} id Replication policy ID
     * @param {module:api/ProductsApi~replicationPoliciesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.replicationPoliciesIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling replicationPoliciesIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/replication/policies/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationPoliciesIdGet operation.
     * @callback module:api/ProductsApi~replicationPoliciesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get replication policy.
     * This endpoint let user get replication policy by specific ID. 
     * @param {Number} id policy ID
     * @param {module:api/ProductsApi~replicationPoliciesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationPolicy}
     */
    this.replicationPoliciesIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling replicationPoliciesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ReplicationPolicy;

      return this.apiClient.callApi(
        '/replication/policies/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationPoliciesIdPut operation.
     * @callback module:api/ProductsApi~replicationPoliciesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the replication policy
     * This endpoint let user update policy. 
     * @param {Number} id policy ID
     * @param {module:model/ReplicationPolicy} policy The replication policy model.
     * @param {module:api/ProductsApi~replicationPoliciesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.replicationPoliciesIdPut = function(id, policy, callback) {
      var postBody = policy;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling replicationPoliciesIdPut");
      }

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling replicationPoliciesIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/replication/policies/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationPoliciesPost operation.
     * @callback module:api/ProductsApi~replicationPoliciesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a replication policy
     * This endpoint let user create a replication policy 
     * @param {module:model/ReplicationPolicy} policy The policy model.
     * @param {module:api/ProductsApi~replicationPoliciesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.replicationPoliciesPost = function(policy, callback) {
      var postBody = policy;

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling replicationPoliciesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/replication/policies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersGet operation.
     * @callback module:api/ProductsApi~scannersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScannerRegistration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List scanner registrations
     * Returns a list of currently configured scanner registrations. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number.
     * @param {Number} opts.pageSize The size of per page.
     * @param {module:api/ProductsApi~scannersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScannerRegistration>}
     */
    this.scannersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [ScannerRegistration];

      return this.apiClient.callApi(
        '/scanners', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersPingPost operation.
     * @callback module:api/ProductsApi~scannersPingPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests scanner registration settings
     * Pings scanner adapter to test endpoint URL and authorization settings. 
     * @param {module:model/ScannerRegistrationSettings} settings A scanner registration settings to be tested.
     * @param {module:api/ProductsApi~scannersPingPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.scannersPingPost = function(settings, callback) {
      var postBody = settings;

      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling scannersPingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/scanners/ping', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersRegistrationIdGet operation.
     * @callback module:api/ProductsApi~scannersRegistrationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScannerRegistration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a scanner registration details
     * Retruns the details of the specified scanner registration. 
     * @param {String} registrationId The scanner registration identifer.
     * @param {module:api/ProductsApi~scannersRegistrationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScannerRegistration}
     */
    this.scannersRegistrationIdGet = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling scannersRegistrationIdGet");
      }


      var pathParams = {
        'registration_id': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ScannerRegistration;

      return this.apiClient.callApi(
        '/scanners/{registration_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersRegistrationIdMetadataGet operation.
     * @callback module:api/ProductsApi~scannersRegistrationIdMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScannerAdapterMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the metadata of the specified scanner registration
     * Get the metadata of the specified scanner registration, including the capabilities and customzied properties. 
     * @param {String} registrationId The scanner registration identifier.
     * @param {module:api/ProductsApi~scannersRegistrationIdMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScannerAdapterMetadata}
     */
    this.scannersRegistrationIdMetadataGet = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling scannersRegistrationIdMetadataGet");
      }


      var pathParams = {
        'registration_id': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ScannerAdapterMetadata;

      return this.apiClient.callApi(
        '/scanners/{registration_id}/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGet operation.
     * @callback module:api/ProductsApi~searchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Search>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for projects, repositories and helm charts
     * The Search endpoint returns information about the projects ,repositories  and helm charts offered at public status or related to the current logged in user. The response includes the project, repository list and charts in a proper display order. 
     * @param {String} q Search parameter for project and repository name.
     * @param {module:api/ProductsApi~searchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Search>}
     */
    this.searchGet = function(q, callback) {
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Search];

      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the statisticsGet operation.
     * @callback module:api/ProductsApi~statisticsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatisticMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects number and repositories number relevant to the user
     * This endpoint is aimed to statistic all of the projects number and repositories number relevant to the logined user, also the public projects number and repositories number. If the user is admin, he can also get total projects number and total repositories number. 
     * @param {module:api/ProductsApi~statisticsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatisticMap}
     */
    this.statisticsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = StatisticMap;

      return this.apiClient.callApi(
        '/statistics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the systemCVEAllowlistGet operation.
     * @callback module:api/ProductsApi~systemCVEAllowlistGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CVEAllowlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the system level allowlist of CVE.
     * Get the system level allowlist of CVE.  This API can be called by all authenticated users.
     * @param {module:api/ProductsApi~systemCVEAllowlistGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CVEAllowlist}
     */
    this.systemCVEAllowlistGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = CVEAllowlist;

      return this.apiClient.callApi(
        '/system/CVEAllowlist', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the systemCVEAllowlistPut operation.
     * @callback module:api/ProductsApi~systemCVEAllowlistPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the system level allowlist of CVE.
     * This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.
     * @param {Object} opts Optional parameters
     * @param {module:model/CVEAllowlist} opts.allowlist The allowlist with new content
     * @param {module:api/ProductsApi~systemCVEAllowlistPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.systemCVEAllowlistPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['allowlist'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/system/CVEAllowlist', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the systemOidcPingPost operation.
     * @callback module:api/ProductsApi~systemOidcPingPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test the OIDC endpoint.
     * Test the OIDC endpoint, the setting of the endpoint is provided in the request.  This API can only be called by system admin.
     * @param {module:model/PingEndpoint} endpoint Request body for OIDC endpoint to be tested.
     * @param {module:api/ProductsApi~systemOidcPingPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.systemOidcPingPost = function(endpoint, callback) {
      var postBody = endpoint;

      // verify the required parameter 'endpoint' is set
      if (endpoint === undefined || endpoint === null) {
        throw new Error("Missing the required parameter 'endpoint' when calling systemOidcPingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/system/oidc/ping', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsGet operation.
     * @callback module:api/ProductsApi~usergroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all user groups information
     * Get all user groups information
     * @param {module:api/ProductsApi~usergroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserGroup>}
     */
    this.usergroupsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [UserGroup];

      return this.apiClient.callApi(
        '/usergroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsGroupIdDelete operation.
     * @callback module:api/ProductsApi~usergroupsGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user group
     * Delete user group
     * @param {Number} groupId 
     * @param {module:api/ProductsApi~usergroupsGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usergroupsGroupIdDelete = function(groupId, callback) {
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling usergroupsGroupIdDelete");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{group_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsGroupIdGet operation.
     * @callback module:api/ProductsApi~usergroupsGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user group information
     * Get user group information
     * @param {Number} groupId Group ID
     * @param {module:api/ProductsApi~usergroupsGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    this.usergroupsGroupIdGet = function(groupId, callback) {
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling usergroupsGroupIdGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = UserGroup;

      return this.apiClient.callApi(
        '/usergroups/{group_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsGroupIdPut operation.
     * @callback module:api/ProductsApi~usergroupsGroupIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update group information
     * Update user group information
     * @param {Number} groupId Group ID
     * @param {Object} opts Optional parameters
     * @param {module:model/UserGroup} opts.usergroup 
     * @param {module:api/ProductsApi~usergroupsGroupIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usergroupsGroupIdPut = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = opts['usergroup'];

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling usergroupsGroupIdPut");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{group_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsPost operation.
     * @callback module:api/ProductsApi~usergroupsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user group
     * Create user group information
     * @param {Object} opts Optional parameters
     * @param {module:model/UserGroup} opts.usergroup 
     * @param {module:api/ProductsApi~usergroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usergroupsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['usergroup'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/usergroups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersCurrentGet operation.
     * @callback module:api/ProductsApi~usersCurrentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user info.
     * This endpoint is to get the current user information. 
     * @param {module:api/ProductsApi~usersCurrentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersCurrentGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/current', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersCurrentPermissionsGet operation.
     * @callback module:api/ProductsApi~usersCurrentPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Permission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user permissions.
     * This endpoint is to get the current user permissions. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.scope Get permissions of the scope
     * @param {Boolean} opts.relative If true, the resources in the response are relative to the scope, eg for resource '/project/1/repository' if relative is 'true' then the resource in response will be 'repository'. 
     * @param {module:api/ProductsApi~usersCurrentPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Permission>}
     */
    this.usersCurrentPermissionsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'scope': opts['scope'],
        'relative': opts['relative'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Permission];

      return this.apiClient.callApi(
        '/users/current/permissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/ProductsApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get registered users of Harbor.
     * This endpoint is for user to search registered users, support for filtering results with username.Notice, by now this operation is only for administrator. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.username Username for filtering results.
     * @param {String} opts.email Email for filtering results.
     * @param {Number} opts.page The page number, default is 1.
     * @param {Number} opts.pageSize The size of per page.
     * @param {module:api/ProductsApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.usersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'username': opts['username'],
        'email': opts['email'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/ProductsApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new user account.
     * This endpoint is to create a user if the user does not already exist. 
     * @param {module:model/User} user New created user.
     * @param {module:api/ProductsApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersPost = function(user, callback) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSearchGet operation.
     * @callback module:api/ProductsApi~usersSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSearch>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search users by username
     * This endpoint is to search the users by username. 
     * @param {String} username Username for filtering results.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number, default is 1.
     * @param {Number} opts.pageSize The size of per page.
     * @param {module:api/ProductsApi~usersSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSearch>}
     */
    this.usersSearchGet = function(username, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling usersSearchGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'username': username,
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [UserSearch];

      return this.apiClient.callApi(
        '/users/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdCliSecretPut operation.
     * @callback module:api/ProductsApi~usersUserIdCliSecretPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set CLI secret for a user.
     * This endpoint let user generate a new CLI secret for himself.  This API only works when auth mode is set to 'OIDC'. Once this API returns with successful status, the old secret will be invalid, as there will be only one CLI secret for a user. 
     * @param {Number} userId User ID
     * @param {module:model/CliSecretInput} inputSecret JSON object that includes the new secret
     * @param {module:api/ProductsApi~usersUserIdCliSecretPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersUserIdCliSecretPut = function(userId, inputSecret, callback) {
      var postBody = inputSecret;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdCliSecretPut");
      }

      // verify the required parameter 'inputSecret' is set
      if (inputSecret === undefined || inputSecret === null) {
        throw new Error("Missing the required parameter 'inputSecret' when calling usersUserIdCliSecretPut");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/cli_secret', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdDelete operation.
     * @callback module:api/ProductsApi~usersUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a registered user as be removed.
     * This endpoint let administrator of Harbor mark a registered user as be removed.It actually won't be deleted from DB. 
     * @param {Number} userId User ID for marking as to be removed.
     * @param {module:api/ProductsApi~usersUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersUserIdDelete = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDelete");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdGet operation.
     * @callback module:api/ProductsApi~usersUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's profile.
     * Get user's profile with user id. 
     * @param {Number} userId Registered user ID
     * @param {module:api/ProductsApi~usersUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersUserIdGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdGet");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdPasswordPut operation.
     * @callback module:api/ProductsApi~usersUserIdPasswordPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the password on a user that already exists.
     * This endpoint is for user to update password. Users with the admin role can change any user's password. Guest users can change only their own password. 
     * @param {Number} userId Registered user ID.
     * @param {module:model/Password} password Password to be updated, the attribute 'old_password' is optional when the API is called by the system administrator.
     * @param {module:api/ProductsApi~usersUserIdPasswordPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersUserIdPasswordPut = function(userId, password, callback) {
      var postBody = password;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdPasswordPut");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling usersUserIdPasswordPut");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/password', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdPut operation.
     * @callback module:api/ProductsApi~usersUserIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a registered user to change his profile.
     * This endpoint let a registered user change his profile. 
     * @param {Number} userId Registered user ID
     * @param {module:model/UserProfile} profile Only email, realname and comment can be modified.
     * @param {module:api/ProductsApi~usersUserIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersUserIdPut = function(userId, profile, callback) {
      var postBody = profile;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdPut");
      }

      // verify the required parameter 'profile' is set
      if (profile === undefined || profile === null) {
        throw new Error("Missing the required parameter 'profile' when calling usersUserIdPut");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdSysadminPut operation.
     * @callback module:api/ProductsApi~usersUserIdSysadminPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a registered user to change to be an administrator of Harbor.
     * This endpoint let a registered user change to be an administrator of Harbor. 
     * @param {Number} userId Registered user ID
     * @param {module:model/SysAdminFlag} sysadminFlag Toggle a user to admin or not.
     * @param {module:api/ProductsApi~usersUserIdSysadminPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersUserIdSysadminPut = function(userId, sysadminFlag, callback) {
      var postBody = sysadminFlag;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdSysadminPut");
      }

      // verify the required parameter 'sysadminFlag' is set
      if (sysadminFlag === undefined || sysadminFlag === null) {
        throw new Error("Missing the required parameter 'sysadminFlag' when calling usersUserIdSysadminPut");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/sysadmin', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
