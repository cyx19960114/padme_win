/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IsDefault', 'model/ProjectScanner', 'model/ScannerAdapterMetadata', 'model/ScannerRegistration', 'model/ScannerRegistrationReq', 'model/ScannerRegistrationSettings'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IsDefault'), require('../model/ProjectScanner'), require('../model/ScannerAdapterMetadata'), require('../model/ScannerRegistration'), require('../model/ScannerRegistrationReq'), require('../model/ScannerRegistrationSettings'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.ScannersApi = factory(root.HarborApi.ApiClient, root.HarborApi.IsDefault, root.HarborApi.ProjectScanner, root.HarborApi.ScannerAdapterMetadata, root.HarborApi.ScannerRegistration, root.HarborApi.ScannerRegistrationReq, root.HarborApi.ScannerRegistrationSettings);
  }
}(this, function(ApiClient, IsDefault, ProjectScanner, ScannerAdapterMetadata, ScannerRegistration, ScannerRegistrationReq, ScannerRegistrationSettings) {
  'use strict';

  /**
   * Scanners service.
   * @module api/ScannersApi
   * @version 2.0
   */

  /**
   * Constructs a new ScannersApi. 
   * @alias module:api/ScannersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the projectsProjectIdScannerCandidatesGet operation.
     * @callback module:api/ScannersApi~projectsProjectIdScannerCandidatesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScannerRegistration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scanner registration candidates for configurating project level scanner
     * Retrieve the system configured scanner registrations as candidates of setting project level scanner. 
     * @param {Number} projectId The project identifier.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number.
     * @param {Number} opts.pageSize The size of per page.
     * @param {module:api/ScannersApi~projectsProjectIdScannerCandidatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScannerRegistration>}
     */
    this.projectsProjectIdScannerCandidatesGet = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdScannerCandidatesGet");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [ScannerRegistration];

      return this.apiClient.callApi(
        '/projects/{project_id}/scanner/candidates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdScannerGet operation.
     * @callback module:api/ScannersApi~projectsProjectIdScannerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScannerRegistration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project level scanner
     * Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.
     * @param {Number} projectId The project identifier.
     * @param {module:api/ScannersApi~projectsProjectIdScannerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScannerRegistration}
     */
    this.projectsProjectIdScannerGet = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdScannerGet");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ScannerRegistration;

      return this.apiClient.callApi(
        '/projects/{project_id}/scanner', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectIdScannerPut operation.
     * @callback module:api/ScannersApi~projectsProjectIdScannerPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure scanner for the specified project
     * Set one of the system configured scanner registration as the indepndent scanner of the specified project.
     * @param {Number} projectId The project identifier.
     * @param {module:model/ProjectScanner} payload 
     * @param {module:api/ScannersApi~projectsProjectIdScannerPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsProjectIdScannerPut = function(projectId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsProjectIdScannerPut");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling projectsProjectIdScannerPut");
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_id}/scanner', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersGet operation.
     * @callback module:api/ScannersApi~scannersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScannerRegistration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List scanner registrations
     * Returns a list of currently configured scanner registrations. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number.
     * @param {Number} opts.pageSize The size of per page.
     * @param {module:api/ScannersApi~scannersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScannerRegistration>}
     */
    this.scannersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [ScannerRegistration];

      return this.apiClient.callApi(
        '/scanners', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersPingPost operation.
     * @callback module:api/ScannersApi~scannersPingPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests scanner registration settings
     * Pings scanner adapter to test endpoint URL and authorization settings. 
     * @param {module:model/ScannerRegistrationSettings} settings A scanner registration settings to be tested.
     * @param {module:api/ScannersApi~scannersPingPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.scannersPingPost = function(settings, callback) {
      var postBody = settings;

      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling scannersPingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/scanners/ping', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersPost operation.
     * @callback module:api/ScannersApi~scannersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a scanner registration
     * Creats a new scanner registration with the given data. 
     * @param {module:model/ScannerRegistrationReq} registration A scanner registration to be created.
     * @param {module:api/ScannersApi~scannersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.scannersPost = function(registration, callback) {
      var postBody = registration;

      // verify the required parameter 'registration' is set
      if (registration === undefined || registration === null) {
        throw new Error("Missing the required parameter 'registration' when calling scannersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/scanners', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersRegistrationIdDelete operation.
     * @callback module:api/ScannersApi~scannersRegistrationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScannerRegistration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scanner registration
     * Deletes the specified scanner registration. 
     * @param {String} registrationId The scanner registration identifier.
     * @param {module:api/ScannersApi~scannersRegistrationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScannerRegistration}
     */
    this.scannersRegistrationIdDelete = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling scannersRegistrationIdDelete");
      }


      var pathParams = {
        'registration_id': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ScannerRegistration;

      return this.apiClient.callApi(
        '/scanners/{registration_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersRegistrationIdGet operation.
     * @callback module:api/ScannersApi~scannersRegistrationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScannerRegistration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a scanner registration details
     * Retruns the details of the specified scanner registration. 
     * @param {String} registrationId The scanner registration identifer.
     * @param {module:api/ScannersApi~scannersRegistrationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScannerRegistration}
     */
    this.scannersRegistrationIdGet = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling scannersRegistrationIdGet");
      }


      var pathParams = {
        'registration_id': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ScannerRegistration;

      return this.apiClient.callApi(
        '/scanners/{registration_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersRegistrationIdMetadataGet operation.
     * @callback module:api/ScannersApi~scannersRegistrationIdMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScannerAdapterMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the metadata of the specified scanner registration
     * Get the metadata of the specified scanner registration, including the capabilities and customzied properties. 
     * @param {String} registrationId The scanner registration identifier.
     * @param {module:api/ScannersApi~scannersRegistrationIdMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScannerAdapterMetadata}
     */
    this.scannersRegistrationIdMetadataGet = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling scannersRegistrationIdMetadataGet");
      }


      var pathParams = {
        'registration_id': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ScannerAdapterMetadata;

      return this.apiClient.callApi(
        '/scanners/{registration_id}/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersRegistrationIdPatch operation.
     * @callback module:api/ScannersApi~scannersRegistrationIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set system default scanner registration
     * Set the specified scanner registration as the system default one. 
     * @param {String} registrationId The scanner registration identifier.
     * @param {module:model/IsDefault} payload 
     * @param {module:api/ScannersApi~scannersRegistrationIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.scannersRegistrationIdPatch = function(registrationId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling scannersRegistrationIdPatch");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling scannersRegistrationIdPatch");
      }


      var pathParams = {
        'registration_id': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/scanners/{registration_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scannersRegistrationIdPut operation.
     * @callback module:api/ScannersApi~scannersRegistrationIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a scanner registration
     * Updates the specified scanner registration. 
     * @param {String} registrationId The scanner registration identifier.
     * @param {module:model/ScannerRegistrationReq} registration A scanner registraiton to be updated.
     * @param {module:api/ScannersApi~scannersRegistrationIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.scannersRegistrationIdPut = function(registrationId, registration, callback) {
      var postBody = registration;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling scannersRegistrationIdPut");
      }

      // verify the required parameter 'registration' is set
      if (registration === undefined || registration === null) {
        throw new Error("Missing the required parameter 'registration' when calling scannersRegistrationIdPut");
      }


      var pathParams = {
        'registration_id': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/scanners/{registration_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
