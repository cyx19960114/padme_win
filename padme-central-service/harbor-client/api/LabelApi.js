/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Label'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Label'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.LabelApi = factory(root.HarborApi.ApiClient, root.HarborApi.Label);
  }
}(this, function(ApiClient, Label) {
  'use strict';

  /**
   * Label service.
   * @module api/LabelApi
   * @version 2.0
   */

  /**
   * Constructs a new LabelApi. 
   * @alias module:api/LabelApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the chartrepoRepoChartsNameVersionLabelsGet operation.
     * @callback module:api/LabelApi~chartrepoRepoChartsNameVersionLabelsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the attahced labels of chart.
     * Return the attahced labels of the specified chart version.
     * @param {String} repo The project name
     * @param {String} name The chart name
     * @param {String} version The chart version
     * @param {module:api/LabelApi~chartrepoRepoChartsNameVersionLabelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.chartrepoRepoChartsNameVersionLabelsGet = function(repo, name, version, callback) {
      var postBody = null;

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameVersionLabelsGet");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling chartrepoRepoChartsNameVersionLabelsGet");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling chartrepoRepoChartsNameVersionLabelsGet");
      }


      var pathParams = {
        'repo': repo,
        'name': name,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/chartrepo/{repo}/charts/{name}/{version}/labels', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the chartrepoRepoChartsNameVersionLabelsIdDelete operation.
     * @callback module:api/LabelApi~chartrepoRepoChartsNameVersionLabelsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove label from chart.
     * Remove label from the specified chart version.
     * @param {String} repo The project name
     * @param {String} name The chart name
     * @param {String} version The chart version
     * @param {Number} id The label ID
     * @param {module:api/LabelApi~chartrepoRepoChartsNameVersionLabelsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.chartrepoRepoChartsNameVersionLabelsIdDelete = function(repo, name, version, id, callback) {
      var postBody = null;

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameVersionLabelsIdDelete");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling chartrepoRepoChartsNameVersionLabelsIdDelete");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling chartrepoRepoChartsNameVersionLabelsIdDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling chartrepoRepoChartsNameVersionLabelsIdDelete");
      }


      var pathParams = {
        'repo': repo,
        'name': name,
        'version': version,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/chartrepo/{repo}/charts/{name}/{version}/labels/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the chartrepoRepoChartsNameVersionLabelsPost operation.
     * @callback module:api/LabelApi~chartrepoRepoChartsNameVersionLabelsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark label to chart.
     * Mark label to the specified chart version.
     * @param {String} repo The project name
     * @param {String} name The chart name
     * @param {String} version The chart version
     * @param {module:model/Label} label The label being marked to the chart version
     * @param {module:api/LabelApi~chartrepoRepoChartsNameVersionLabelsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.chartrepoRepoChartsNameVersionLabelsPost = function(repo, name, version, label, callback) {
      var postBody = label;

      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameVersionLabelsPost");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling chartrepoRepoChartsNameVersionLabelsPost");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling chartrepoRepoChartsNameVersionLabelsPost");
      }

      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling chartrepoRepoChartsNameVersionLabelsPost");
      }


      var pathParams = {
        'repo': repo,
        'name': name,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/chartrepo/{repo}/charts/{name}/{version}/labels', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
