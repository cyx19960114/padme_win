/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Errors', 'model/Robot', 'model/RobotCreate', 'model/RobotCreated', 'model/RobotSec'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Errors'), require('../model/Robot'), require('../model/RobotCreate'), require('../model/RobotCreated'), require('../model/RobotSec'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.RobotApi = factory(root.HarborApi.ApiClient, root.HarborApi.Errors, root.HarborApi.Robot, root.HarborApi.RobotCreate, root.HarborApi.RobotCreated, root.HarborApi.RobotSec);
  }
}(this, function(ApiClient, Errors, Robot, RobotCreate, RobotCreated, RobotSec) {
  'use strict';

  /**
   * Robot service.
   * @module api/RobotApi
   * @version 2.0
   */

  /**
   * Constructs a new RobotApi. 
   * @alias module:api/RobotApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createRobot operation.
     * @callback module:api/RobotApi~createRobotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RobotCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a robot account
     * Create a robot account
     * @param {module:model/RobotCreate} robot The JSON object of a robot account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/RobotApi~createRobotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RobotCreated}
     */
    this.createRobot = function(robot, opts, callback) {
      opts = opts || {};
      var postBody = robot;

      // verify the required parameter 'robot' is set
      if (robot === undefined || robot === null) {
        throw new Error("Missing the required parameter 'robot' when calling createRobot");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = RobotCreated;

      return this.apiClient.callApi(
        '/robots', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRobot operation.
     * @callback module:api/RobotApi~deleteRobotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a robot account
     * This endpoint deletes specific robot account information by robot ID.
     * @param {Number} robotId Robot ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/RobotApi~deleteRobotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRobot = function(robotId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'robotId' is set
      if (robotId === undefined || robotId === null) {
        throw new Error("Missing the required parameter 'robotId' when calling deleteRobot");
      }


      var pathParams = {
        'robot_id': robotId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/robots/{robot_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRobotByID operation.
     * @callback module:api/RobotApi~getRobotByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Robot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a robot account
     * This endpoint returns specific robot account information by robot ID.
     * @param {Number} robotId Robot ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/RobotApi~getRobotByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Robot}
     */
    this.getRobotByID = function(robotId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'robotId' is set
      if (robotId === undefined || robotId === null) {
        throw new Error("Missing the required parameter 'robotId' when calling getRobotByID");
      }


      var pathParams = {
        'robot_id': robotId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = Robot;

      return this.apiClient.callApi(
        '/robots/{robot_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRobot operation.
     * @callback module:api/RobotApi~listRobotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Robot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get robot account
     * List the robot accounts with the specified level and project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {String} opts.q Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {module:api/RobotApi~listRobotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Robot>}
     */
    this.listRobot = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'q': opts['q'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Robot];

      return this.apiClient.callApi(
        '/robots', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshSec operation.
     * @callback module:api/RobotApi~refreshSecCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RobotSec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh the robot secret
     * Refresh the robot secret
     * @param {Number} robotId Robot ID
     * @param {module:model/RobotSec} robotSec The JSON object of a robot account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/RobotApi~refreshSecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RobotSec}
     */
    this.refreshSec = function(robotId, robotSec, opts, callback) {
      opts = opts || {};
      var postBody = robotSec;

      // verify the required parameter 'robotId' is set
      if (robotId === undefined || robotId === null) {
        throw new Error("Missing the required parameter 'robotId' when calling refreshSec");
      }

      // verify the required parameter 'robotSec' is set
      if (robotSec === undefined || robotSec === null) {
        throw new Error("Missing the required parameter 'robotSec' when calling refreshSec");
      }


      var pathParams = {
        'robot_id': robotId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = RobotSec;

      return this.apiClient.callApi(
        '/robots/{robot_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRobot operation.
     * @callback module:api/RobotApi~updateRobotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a robot account
     * This endpoint updates specific robot account information by robot ID.
     * @param {Number} robotId Robot ID
     * @param {module:model/Robot} robot The JSON object of a robot account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/RobotApi~updateRobotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateRobot = function(robotId, robot, opts, callback) {
      opts = opts || {};
      var postBody = robot;

      // verify the required parameter 'robotId' is set
      if (robotId === undefined || robotId === null) {
        throw new Error("Missing the required parameter 'robotId' when calling updateRobot");
      }

      // verify the required parameter 'robot' is set
      if (robot === undefined || robot === null) {
        throw new Error("Missing the required parameter 'robot' when calling updateRobot");
      }


      var pathParams = {
        'robot_id': robotId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/robots/{robot_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
