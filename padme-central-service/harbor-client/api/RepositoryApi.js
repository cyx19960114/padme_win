/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Errors', 'model/Repository'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Errors'), require('../model/Repository'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.RepositoryApi = factory(root.HarborApi.ApiClient, root.HarborApi.Errors, root.HarborApi.Repository);
  }
}(this, function(ApiClient, Errors, Repository) {
  'use strict';

  /**
   * Repository service.
   * @module api/RepositoryApi
   * @version 2.0
   */

  /**
   * Constructs a new RepositoryApi. 
   * @alias module:api/RepositoryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteRepository operation.
     * @callback module:api/RepositoryApi~deleteRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete repository
     * Delete the repository specified by name
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/RepositoryApi~deleteRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRepository = function(projectName, repositoryName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling deleteRepository");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling deleteRepository");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepository operation.
     * @callback module:api/RepositoryApi~getRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get repository
     * Get the repository specified by name
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/RepositoryApi~getRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    this.getRepository = function(projectName, repositoryName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling getRepository");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling getRepository");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = Repository;

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRepositories operation.
     * @callback module:api/RepositoryApi~listRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories
     * List repositories of the specified project
     * @param {String} projectName The name of the project
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {String} opts.q Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {module:api/RepositoryApi~listRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    this.listRepositories = function(projectName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling listRepositories");
      }


      var pathParams = {
        'project_name': projectName
      };
      var queryParams = {
        'q': opts['q'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Repository];

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepository operation.
     * @callback module:api/RepositoryApi~updateRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update repository
     * Update the repository specified by name
     * @param {String} projectName The name of the project
     * @param {String} repositoryName The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
     * @param {module:model/Repository} repository The JSON object of repository.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/RepositoryApi~updateRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateRepository = function(projectName, repositoryName, repository, opts, callback) {
      opts = opts || {};
      var postBody = repository;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling updateRepository");
      }

      // verify the required parameter 'repositoryName' is set
      if (repositoryName === undefined || repositoryName === null) {
        throw new Error("Missing the required parameter 'repositoryName' when calling updateRepository");
      }

      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling updateRepository");
      }


      var pathParams = {
        'project_name': projectName,
        'repository_name': repositoryName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/repositories/{repository_name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
