/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Errors', 'model/Robot', 'model/RobotCreateV1', 'model/RobotCreated'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Errors'), require('../model/Robot'), require('../model/RobotCreateV1'), require('../model/RobotCreated'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.Robotv1Api = factory(root.HarborApi.ApiClient, root.HarborApi.Errors, root.HarborApi.Robot, root.HarborApi.RobotCreateV1, root.HarborApi.RobotCreated);
  }
}(this, function(ApiClient, Errors, Robot, RobotCreateV1, RobotCreated) {
  'use strict';

  /**
   * Robotv1 service.
   * @module api/Robotv1Api
   * @version 2.0
   */

  /**
   * Constructs a new Robotv1Api. 
   * @alias module:api/Robotv1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createRobotV1 operation.
     * @callback module:api/Robotv1Api~createRobotV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RobotCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a robot account
     * Create a robot account
     * @param {String} projectNameOrId The name or id of the project
     * @param {module:model/RobotCreateV1} robot The JSON object of a robot account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {Boolean} opts.xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (default to false)
     * @param {module:api/Robotv1Api~createRobotV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RobotCreated}
     */
    this.createRobotV1 = function(projectNameOrId, robot, opts, callback) {
      opts = opts || {};
      var postBody = robot;

      // verify the required parameter 'projectNameOrId' is set
      if (projectNameOrId === undefined || projectNameOrId === null) {
        throw new Error("Missing the required parameter 'projectNameOrId' when calling createRobotV1");
      }

      // verify the required parameter 'robot' is set
      if (robot === undefined || robot === null) {
        throw new Error("Missing the required parameter 'robot' when calling createRobotV1");
      }


      var pathParams = {
        'project_name_or_id': projectNameOrId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId'],
        'X-Is-Resource-Name': opts['xIsResourceName']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = RobotCreated;

      return this.apiClient.callApi(
        '/projects/{project_name_or_id}/robots', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRobotV1 operation.
     * @callback module:api/Robotv1Api~deleteRobotV1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a robot account
     * This endpoint deletes specific robot account information by robot ID.
     * @param {String} projectNameOrId The name or id of the project
     * @param {Number} robotId Robot ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {Boolean} opts.xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (default to false)
     * @param {module:api/Robotv1Api~deleteRobotV1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRobotV1 = function(projectNameOrId, robotId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectNameOrId' is set
      if (projectNameOrId === undefined || projectNameOrId === null) {
        throw new Error("Missing the required parameter 'projectNameOrId' when calling deleteRobotV1");
      }

      // verify the required parameter 'robotId' is set
      if (robotId === undefined || robotId === null) {
        throw new Error("Missing the required parameter 'robotId' when calling deleteRobotV1");
      }


      var pathParams = {
        'project_name_or_id': projectNameOrId,
        'robot_id': robotId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId'],
        'X-Is-Resource-Name': opts['xIsResourceName']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name_or_id}/robots/{robot_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRobotByIDV1 operation.
     * @callback module:api/Robotv1Api~getRobotByIDV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Robot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a robot account
     * This endpoint returns specific robot account information by robot ID.
     * @param {String} projectNameOrId The name or id of the project
     * @param {Number} robotId Robot ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {Boolean} opts.xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (default to false)
     * @param {module:api/Robotv1Api~getRobotByIDV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Robot}
     */
    this.getRobotByIDV1 = function(projectNameOrId, robotId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectNameOrId' is set
      if (projectNameOrId === undefined || projectNameOrId === null) {
        throw new Error("Missing the required parameter 'projectNameOrId' when calling getRobotByIDV1");
      }

      // verify the required parameter 'robotId' is set
      if (robotId === undefined || robotId === null) {
        throw new Error("Missing the required parameter 'robotId' when calling getRobotByIDV1");
      }


      var pathParams = {
        'project_name_or_id': projectNameOrId,
        'robot_id': robotId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId'],
        'X-Is-Resource-Name': opts['xIsResourceName']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = Robot;

      return this.apiClient.callApi(
        '/projects/{project_name_or_id}/robots/{robot_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRobotV1 operation.
     * @callback module:api/Robotv1Api~listRobotV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Robot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all robot accounts of specified project
     * Get all robot accounts of specified project
     * @param {String} projectNameOrId The name or id of the project
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {Boolean} opts.xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (default to false)
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {String} opts.q Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @param {module:api/Robotv1Api~listRobotV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Robot>}
     */
    this.listRobotV1 = function(projectNameOrId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectNameOrId' is set
      if (projectNameOrId === undefined || projectNameOrId === null) {
        throw new Error("Missing the required parameter 'projectNameOrId' when calling listRobotV1");
      }


      var pathParams = {
        'project_name_or_id': projectNameOrId
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'q': opts['q'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId'],
        'X-Is-Resource-Name': opts['xIsResourceName']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Robot];

      return this.apiClient.callApi(
        '/projects/{project_name_or_id}/robots', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRobotV1 operation.
     * @callback module:api/Robotv1Api~updateRobotV1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update status of robot account.
     * Used to disable/enable a specified robot account.
     * @param {String} projectNameOrId The name or id of the project
     * @param {Number} robotId Robot ID
     * @param {module:model/Robot} robot The JSON object of a robot account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {Boolean} opts.xIsResourceName The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name. (default to false)
     * @param {module:api/Robotv1Api~updateRobotV1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateRobotV1 = function(projectNameOrId, robotId, robot, opts, callback) {
      opts = opts || {};
      var postBody = robot;

      // verify the required parameter 'projectNameOrId' is set
      if (projectNameOrId === undefined || projectNameOrId === null) {
        throw new Error("Missing the required parameter 'projectNameOrId' when calling updateRobotV1");
      }

      // verify the required parameter 'robotId' is set
      if (robotId === undefined || robotId === null) {
        throw new Error("Missing the required parameter 'robotId' when calling updateRobotV1");
      }

      // verify the required parameter 'robot' is set
      if (robot === undefined || robot === null) {
        throw new Error("Missing the required parameter 'robot' when calling updateRobotV1");
      }


      var pathParams = {
        'project_name_or_id': projectNameOrId,
        'robot_id': robotId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId'],
        'X-Is-Resource-Name': opts['xIsResourceName']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name_or_id}/robots/{robot_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
