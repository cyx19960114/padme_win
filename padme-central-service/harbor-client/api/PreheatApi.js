/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Errors', 'model/Execution', 'model/Instance', 'model/Metadata', 'model/PreheatPolicy', 'model/ProviderUnderProject', 'model/Task'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Errors'), require('../model/Execution'), require('../model/Instance'), require('../model/Metadata'), require('../model/PreheatPolicy'), require('../model/ProviderUnderProject'), require('../model/Task'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.PreheatApi = factory(root.HarborApi.ApiClient, root.HarborApi.Errors, root.HarborApi.Execution, root.HarborApi.Instance, root.HarborApi.Metadata, root.HarborApi.PreheatPolicy, root.HarborApi.ProviderUnderProject, root.HarborApi.Task);
  }
}(this, function(ApiClient, Errors, Execution, Instance, Metadata, PreheatPolicy, ProviderUnderProject, Task) {
  'use strict';

  /**
   * Preheat service.
   * @module api/PreheatApi
   * @version 2.0
   */

  /**
   * Constructs a new PreheatApi. 
   * @alias module:api/PreheatApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createInstance operation.
     * @callback module:api/PreheatApi~createInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create p2p provider instances
     * Create p2p provider instances
     * @param {module:model/Instance} instance The JSON object of instance.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~createInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createInstance = function(instance, opts, callback) {
      opts = opts || {};
      var postBody = instance;

      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling createInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/p2p/preheat/instances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPolicy operation.
     * @callback module:api/PreheatApi~createPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a preheat policy under a project
     * Create a preheat policy under a project
     * @param {String} projectName The name of the project
     * @param {module:model/PreheatPolicy} policy The policy schema info
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~createPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createPolicy = function(projectName, policy, opts, callback) {
      opts = opts || {};
      var postBody = policy;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling createPolicy");
      }

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling createPolicy");
      }


      var pathParams = {
        'project_name': projectName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/policies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstance operation.
     * @callback module:api/PreheatApi~deleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified P2P provider instance
     * Delete the specified P2P provider instance
     * @param {String} preheatInstanceName Instance Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~deleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteInstance = function(preheatInstanceName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'preheatInstanceName' is set
      if (preheatInstanceName === undefined || preheatInstanceName === null) {
        throw new Error("Missing the required parameter 'preheatInstanceName' when calling deleteInstance");
      }


      var pathParams = {
        'preheat_instance_name': preheatInstanceName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/p2p/preheat/instances/{preheat_instance_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePolicy operation.
     * @callback module:api/PreheatApi~deletePolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a preheat policy
     * Delete a preheat policy
     * @param {String} projectName The name of the project
     * @param {String} preheatPolicyName Preheat Policy Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~deletePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePolicy = function(projectName, preheatPolicyName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling deletePolicy");
      }

      // verify the required parameter 'preheatPolicyName' is set
      if (preheatPolicyName === undefined || preheatPolicyName === null) {
        throw new Error("Missing the required parameter 'preheatPolicyName' when calling deletePolicy");
      }


      var pathParams = {
        'project_name': projectName,
        'preheat_policy_name': preheatPolicyName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/policies/{preheat_policy_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExecution operation.
     * @callback module:api/PreheatApi~getExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a execution detail by id
     * Get a execution detail by id
     * @param {String} projectName The name of the project
     * @param {String} preheatPolicyName Preheat Policy Name
     * @param {Number} executionId Execution ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~getExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    this.getExecution = function(projectName, preheatPolicyName, executionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling getExecution");
      }

      // verify the required parameter 'preheatPolicyName' is set
      if (preheatPolicyName === undefined || preheatPolicyName === null) {
        throw new Error("Missing the required parameter 'preheatPolicyName' when calling getExecution");
      }

      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getExecution");
      }


      var pathParams = {
        'project_name': projectName,
        'preheat_policy_name': preheatPolicyName,
        'execution_id': executionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = Execution;

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstance operation.
     * @callback module:api/PreheatApi~getInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Instance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a P2P provider instance
     * Get a P2P provider instance
     * @param {String} preheatInstanceName Instance Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~getInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Instance}
     */
    this.getInstance = function(preheatInstanceName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'preheatInstanceName' is set
      if (preheatInstanceName === undefined || preheatInstanceName === null) {
        throw new Error("Missing the required parameter 'preheatInstanceName' when calling getInstance");
      }


      var pathParams = {
        'preheat_instance_name': preheatInstanceName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = Instance;

      return this.apiClient.callApi(
        '/p2p/preheat/instances/{preheat_instance_name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPolicy operation.
     * @callback module:api/PreheatApi~getPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreheatPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a preheat policy
     * Get a preheat policy
     * @param {String} projectName The name of the project
     * @param {String} preheatPolicyName Preheat Policy Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~getPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreheatPolicy}
     */
    this.getPolicy = function(projectName, preheatPolicyName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling getPolicy");
      }

      // verify the required parameter 'preheatPolicyName' is set
      if (preheatPolicyName === undefined || preheatPolicyName === null) {
        throw new Error("Missing the required parameter 'preheatPolicyName' when calling getPolicy");
      }


      var pathParams = {
        'project_name': projectName,
        'preheat_policy_name': preheatPolicyName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = PreheatPolicy;

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/policies/{preheat_policy_name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPreheatLog operation.
     * @callback module:api/PreheatApi~getPreheatLogCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the log text stream of the specified task for the given execution
     * Get the log text stream of the specified task for the given execution
     * @param {String} projectName The name of the project
     * @param {String} preheatPolicyName Preheat Policy Name
     * @param {Number} executionId Execution ID
     * @param {Number} taskId Task ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~getPreheatLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getPreheatLog = function(projectName, preheatPolicyName, executionId, taskId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling getPreheatLog");
      }

      // verify the required parameter 'preheatPolicyName' is set
      if (preheatPolicyName === undefined || preheatPolicyName === null) {
        throw new Error("Missing the required parameter 'preheatPolicyName' when calling getPreheatLog");
      }

      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getPreheatLog");
      }

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getPreheatLog");
      }


      var pathParams = {
        'project_name': projectName,
        'preheat_policy_name': preheatPolicyName,
        'execution_id': executionId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExecutions operation.
     * @callback module:api/PreheatApi~listExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Execution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List executions for the given policy
     * List executions for the given policy
     * @param {String} projectName The name of the project
     * @param {String} preheatPolicyName Preheat Policy Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {String} opts.q Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @param {module:api/PreheatApi~listExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Execution>}
     */
    this.listExecutions = function(projectName, preheatPolicyName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling listExecutions");
      }

      // verify the required parameter 'preheatPolicyName' is set
      if (preheatPolicyName === undefined || preheatPolicyName === null) {
        throw new Error("Missing the required parameter 'preheatPolicyName' when calling listExecutions");
      }


      var pathParams = {
        'project_name': projectName,
        'preheat_policy_name': preheatPolicyName
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'q': opts['q'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Execution];

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstances operation.
     * @callback module:api/PreheatApi~listInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Instance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List P2P provider instances
     * List P2P provider instances
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {String} opts.q Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @param {module:api/PreheatApi~listInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Instance>}
     */
    this.listInstances = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'q': opts['q'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Instance];

      return this.apiClient.callApi(
        '/p2p/preheat/instances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPolicies operation.
     * @callback module:api/PreheatApi~listPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PreheatPolicy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List preheat policies
     * List preheat policies
     * @param {String} projectName The name of the project
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {String} opts.q Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @param {module:api/PreheatApi~listPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PreheatPolicy>}
     */
    this.listPolicies = function(projectName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling listPolicies");
      }


      var pathParams = {
        'project_name': projectName
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'q': opts['q'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [PreheatPolicy];

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProviders operation.
     * @callback module:api/PreheatApi~listProvidersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List P2P providers
     * List P2P providers
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~listProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Metadata>}
     */
    this.listProviders = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Metadata];

      return this.apiClient.callApi(
        '/p2p/preheat/providers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProvidersUnderProject operation.
     * @callback module:api/PreheatApi~listProvidersUnderProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProviderUnderProject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all providers at project level
     * Get all providers at project level
     * @param {String} projectName The name of the project
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~listProvidersUnderProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProviderUnderProject>}
     */
    this.listProvidersUnderProject = function(projectName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling listProvidersUnderProject");
      }


      var pathParams = {
        'project_name': projectName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [ProviderUnderProject];

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/providers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listTasks operation.
     * @callback module:api/PreheatApi~listTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Task>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the related tasks for the given execution
     * List all the related tasks for the given execution
     * @param {String} projectName The name of the project
     * @param {String} preheatPolicyName Preheat Policy Name
     * @param {Number} executionId Execution ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {String} opts.q Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @param {module:api/PreheatApi~listTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Task>}
     */
    this.listTasks = function(projectName, preheatPolicyName, executionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling listTasks");
      }

      // verify the required parameter 'preheatPolicyName' is set
      if (preheatPolicyName === undefined || preheatPolicyName === null) {
        throw new Error("Missing the required parameter 'preheatPolicyName' when calling listTasks");
      }

      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling listTasks");
      }


      var pathParams = {
        'project_name': projectName,
        'preheat_policy_name': preheatPolicyName,
        'execution_id': executionId
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'q': opts['q'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [Task];

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manualPreheat operation.
     * @callback module:api/PreheatApi~manualPreheatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manual preheat
     * Manual preheat
     * @param {String} projectName The name of the project
     * @param {String} preheatPolicyName Preheat Policy Name
     * @param {module:model/PreheatPolicy} policy The policy schema info
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~manualPreheatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manualPreheat = function(projectName, preheatPolicyName, policy, opts, callback) {
      opts = opts || {};
      var postBody = policy;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling manualPreheat");
      }

      // verify the required parameter 'preheatPolicyName' is set
      if (preheatPolicyName === undefined || preheatPolicyName === null) {
        throw new Error("Missing the required parameter 'preheatPolicyName' when calling manualPreheat");
      }

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling manualPreheat");
      }


      var pathParams = {
        'project_name': projectName,
        'preheat_policy_name': preheatPolicyName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/policies/{preheat_policy_name}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pingInstances operation.
     * @callback module:api/PreheatApi~pingInstancesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping status of a instance.
     * This endpoint checks status of a instance, the instance can be given by ID or Endpoint URL (together with credential) 
     * @param {module:model/Instance} instance The JSON object of instance.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~pingInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.pingInstances = function(instance, opts, callback) {
      opts = opts || {};
      var postBody = instance;

      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling pingInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/p2p/preheat/instances/ping', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopExecution operation.
     * @callback module:api/PreheatApi~stopExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a execution
     * Stop a execution
     * @param {String} projectName The name of the project
     * @param {String} preheatPolicyName Preheat Policy Name
     * @param {Number} executionId Execution ID
     * @param {module:model/Execution} execution The data of execution
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~stopExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.stopExecution = function(projectName, preheatPolicyName, executionId, execution, opts, callback) {
      opts = opts || {};
      var postBody = execution;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling stopExecution");
      }

      // verify the required parameter 'preheatPolicyName' is set
      if (preheatPolicyName === undefined || preheatPolicyName === null) {
        throw new Error("Missing the required parameter 'preheatPolicyName' when calling stopExecution");
      }

      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling stopExecution");
      }

      // verify the required parameter 'execution' is set
      if (execution === undefined || execution === null) {
        throw new Error("Missing the required parameter 'execution' when calling stopExecution");
      }


      var pathParams = {
        'project_name': projectName,
        'preheat_policy_name': preheatPolicyName,
        'execution_id': executionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstance operation.
     * @callback module:api/PreheatApi~updateInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the specified P2P provider instance
     * Update the specified P2P provider instance
     * @param {String} preheatInstanceName Instance Name
     * @param {module:model/Instance} instance The instance to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~updateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateInstance = function(preheatInstanceName, instance, opts, callback) {
      opts = opts || {};
      var postBody = instance;

      // verify the required parameter 'preheatInstanceName' is set
      if (preheatInstanceName === undefined || preheatInstanceName === null) {
        throw new Error("Missing the required parameter 'preheatInstanceName' when calling updateInstance");
      }

      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling updateInstance");
      }


      var pathParams = {
        'preheat_instance_name': preheatInstanceName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/p2p/preheat/instances/{preheat_instance_name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePolicy operation.
     * @callback module:api/PreheatApi~updatePolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update preheat policy
     * Update preheat policy
     * @param {String} projectName The name of the project
     * @param {String} preheatPolicyName Preheat Policy Name
     * @param {module:model/PreheatPolicy} policy The policy schema info
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId An unique ID for the request
     * @param {module:api/PreheatApi~updatePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePolicy = function(projectName, preheatPolicyName, policy, opts, callback) {
      opts = opts || {};
      var postBody = policy;

      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling updatePolicy");
      }

      // verify the required parameter 'preheatPolicyName' is set
      if (preheatPolicyName === undefined || preheatPolicyName === null) {
        throw new Error("Missing the required parameter 'preheatPolicyName' when calling updatePolicy");
      }

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling updatePolicy");
      }


      var pathParams = {
        'project_name': projectName,
        'preheat_policy_name': preheatPolicyName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{project_name}/preheat/policies/{preheat_policy_name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
