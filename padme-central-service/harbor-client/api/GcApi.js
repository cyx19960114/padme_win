/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Errors', 'model/GCHistory', 'model/Schedule'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Errors'), require('../model/GCHistory'), require('../model/Schedule'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.GcApi = factory(root.HarborApi.ApiClient, root.HarborApi.Errors, root.HarborApi.GCHistory, root.HarborApi.Schedule);
  }
}(this, function(ApiClient, Errors, GCHistory, Schedule) {
  'use strict';

  /**
   * Gc service.
   * @module api/GcApi
   * @version 2.0
   */

  /**
   * Constructs a new GcApi. 
   * @alias module:api/GcApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createGCSchedule operation.
     * @callback module:api/GcApi~createGCScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a gc schedule.
     * This endpoint is for update gc schedule. 
     * @param {module:model/Schedule} schedule Updates of gc's schedule.
     * @param {module:api/GcApi~createGCScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createGCSchedule = function(schedule, callback) {
      var postBody = schedule;

      // verify the required parameter 'schedule' is set
      if (schedule === undefined || schedule === null) {
        throw new Error("Missing the required parameter 'schedule' when calling createGCSchedule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/system/gc/schedule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGC operation.
     * @callback module:api/GcApi~getGCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GCHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gc status.
     * This endpoint let user get gc status filtered by specific ID.
     * @param {Number} gcId The ID of the gc log
     * @param {module:api/GcApi~getGCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GCHistory}
     */
    this.getGC = function(gcId, callback) {
      var postBody = null;

      // verify the required parameter 'gcId' is set
      if (gcId === undefined || gcId === null) {
        throw new Error("Missing the required parameter 'gcId' when calling getGC");
      }


      var pathParams = {
        'gc_id': gcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = GCHistory;

      return this.apiClient.callApi(
        '/system/gc/{gc_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGCHistory operation.
     * @callback module:api/GcApi~getGCHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GCHistory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gc results.
     * This endpoint let user get gc execution history.
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @param {Number} opts.page The page number (default to 1)
     * @param {Number} opts.pageSize The size of per page (default to 10)
     * @param {module:api/GcApi~getGCHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GCHistory>}
     */
    this.getGCHistory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'q': opts['q'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = [GCHistory];

      return this.apiClient.callApi(
        '/system/gc', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGCLog operation.
     * @callback module:api/GcApi~getGCLogCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gc job log.
     * This endpoint let user get gc job logs filtered by specific ID.
     * @param {Number} gcId The ID of the gc log
     * @param {module:api/GcApi~getGCLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getGCLog = function(gcId, callback) {
      var postBody = null;

      // verify the required parameter 'gcId' is set
      if (gcId === undefined || gcId === null) {
        throw new Error("Missing the required parameter 'gcId' when calling getGCLog");
      }


      var pathParams = {
        'gc_id': gcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/system/gc/{gc_id}/log', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGCSchedule operation.
     * @callback module:api/GcApi~getGCScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GCHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gc's schedule.
     * This endpoint is for get schedule of gc job.
     * @param {module:api/GcApi~getGCScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GCHistory}
     */
    this.getGCSchedule = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = GCHistory;

      return this.apiClient.callApi(
        '/system/gc/schedule', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGCSchedule operation.
     * @callback module:api/GcApi~updateGCScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update gc's schedule.
     * This endpoint is for update gc schedule. 
     * @param {module:model/Schedule} schedule Updates of gc's schedule.
     * @param {module:api/GcApi~updateGCScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateGCSchedule = function(schedule, callback) {
      var postBody = schedule;

      // verify the required parameter 'schedule' is set
      if (schedule === undefined || schedule === null) {
        throw new Error("Missing the required parameter 'schedule' when calling updateGCSchedule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/system/gc/schedule', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
