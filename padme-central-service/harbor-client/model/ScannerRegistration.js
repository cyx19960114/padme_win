/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.ScannerRegistration = factory(root.HarborApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The ScannerRegistration model module.
   * @module model/ScannerRegistration
   * @version 2.0
   */

  /**
   * Constructs a new <code>ScannerRegistration</code>.
   * Registration represents a named configuration for invoking a scanner via its adapter. 
   * @alias module:model/ScannerRegistration
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>ScannerRegistration</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ScannerRegistration} obj Optional instance to populate.
   * @return {module:model/ScannerRegistration} The populated <code>ScannerRegistration</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('uuid'))
        obj.uuid = ApiClient.convertToType(data['uuid'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('disabled'))
        obj.disabled = ApiClient.convertToType(data['disabled'], 'Boolean');
      if (data.hasOwnProperty('is_default'))
        obj.isDefault = ApiClient.convertToType(data['is_default'], 'Boolean');
      if (data.hasOwnProperty('health'))
        obj.health = ApiClient.convertToType(data['health'], 'String');
      if (data.hasOwnProperty('auth'))
        obj.auth = ApiClient.convertToType(data['auth'], 'String');
      if (data.hasOwnProperty('access_credential'))
        obj.accessCredential = ApiClient.convertToType(data['access_credential'], 'String');
      if (data.hasOwnProperty('skip_certVerify'))
        obj.skipCertVerify = ApiClient.convertToType(data['skip_certVerify'], 'Boolean');
      if (data.hasOwnProperty('use_internal_addr'))
        obj.useInternalAddr = ApiClient.convertToType(data['use_internal_addr'], 'Boolean');
      if (data.hasOwnProperty('adapter'))
        obj.adapter = ApiClient.convertToType(data['adapter'], 'String');
      if (data.hasOwnProperty('vendor'))
        obj.vendor = ApiClient.convertToType(data['vendor'], 'String');
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'String');
    }
    return obj;
  }

  /**
   * The unique identifier of this registration.
   * @member {String} uuid
   */
  exports.prototype.uuid = undefined;

  /**
   * The name of this registration.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * An optional description of this registration.
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * A base URL of the scanner adapter
   * @member {String} url
   */
  exports.prototype.url = undefined;

  /**
   * Indicate whether the registration is enabled or not
   * @member {Boolean} disabled
   * @default false
   */
  exports.prototype.disabled = false;

  /**
   * Indicate if the registration is set as the system default one
   * @member {Boolean} isDefault
   * @default false
   */
  exports.prototype.isDefault = false;

  /**
   * Indicate the healthy of the registration
   * @member {String} health
   * @default ''
   */
  exports.prototype.health = '';

  /**
   * Specify what authentication approach is adopted for the HTTP communications. Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" 
   * @member {String} auth
   * @default ''
   */
  exports.prototype.auth = '';

  /**
   * An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. 
   * @member {String} accessCredential
   */
  exports.prototype.accessCredential = undefined;

  /**
   * Indicate if skip the certificate verification when sending HTTP requests
   * @member {Boolean} skipCertVerify
   * @default false
   */
  exports.prototype.skipCertVerify = false;

  /**
   * Indicate whether use internal registry addr for the scanner to pull content or not
   * @member {Boolean} useInternalAddr
   * @default false
   */
  exports.prototype.useInternalAddr = false;

  /**
   * Optional property to describe the name of the scanner registration
   * @member {String} adapter
   */
  exports.prototype.adapter = undefined;

  /**
   * Optional property to describe the vendor of the scanner registration
   * @member {String} vendor
   */
  exports.prototype.vendor = undefined;

  /**
   * Optional property to describe the version of the scanner registration
   * @member {String} version
   */
  exports.prototype.version = undefined;


  return exports;

}));
