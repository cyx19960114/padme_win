/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ChartMetadata', 'model/Labels'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ChartMetadata'), require('./Labels'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.ChartVersion = factory(root.HarborApi.ApiClient, root.HarborApi.ChartMetadata, root.HarborApi.Labels);
  }
}(this, function(ApiClient, ChartMetadata, Labels) {
  'use strict';

  /**
   * The ChartVersion model module.
   * @module model/ChartVersion
   * @version 2.0
   */

  /**
   * Constructs a new <code>ChartVersion</code>.
   * A specified chart entry
   * @alias module:model/ChartVersion
   * @class
   * @extends module:model/ChartMetadata
   * @param name {String} The name of the chart
   * @param version {String} A SemVer 2 version of chart
   * @param engine {String} The name of template engine
   * @param icon {String} The URL to an icon file
   * @param apiVersion {String} The API version of this chart
   * @param appVersion {String} The version of the application enclosed in the chart
   */
  var exports = function(name, version, engine, icon, apiVersion, appVersion) {
    ChartMetadata.call(this, name, version, engine, icon, apiVersion, appVersion);
  };

  /**
   * Constructs a <code>ChartVersion</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartVersion} obj Optional instance to populate.
   * @return {module:model/ChartVersion} The populated <code>ChartVersion</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      ChartMetadata.constructFromObject(data, obj);
      if (data.hasOwnProperty('labels'))
        obj.labels = Labels.constructFromObject(data['labels']);
      if (data.hasOwnProperty('created'))
        obj.created = ApiClient.convertToType(data['created'], 'String');
      if (data.hasOwnProperty('removed'))
        obj.removed = ApiClient.convertToType(data['removed'], 'Boolean');
      if (data.hasOwnProperty('digest'))
        obj.digest = ApiClient.convertToType(data['digest'], 'String');
      if (data.hasOwnProperty('urls'))
        obj.urls = ApiClient.convertToType(data['urls'], ['String']);
    }
    return obj;
  }

  exports.prototype = Object.create(ChartMetadata.prototype);
  exports.prototype.constructor = exports;
  /**
   * @member {module:model/Labels} labels
   */
  exports.prototype.labels = undefined;

  /**
   * The created time of the chart entry
   * @member {String} created
   */
  exports.prototype.created = undefined;

  /**
   * A flag to indicate if the chart entry is removed
   * @member {Boolean} removed
   */
  exports.prototype.removed = undefined;

  /**
   * The digest value of the chart entry
   * @member {String} digest
   */
  exports.prototype.digest = undefined;

  /**
   * The urls of the chart entry
   * @member {Array.<String>} urls
   */
  exports.prototype.urls = undefined;


  return exports;

}));
