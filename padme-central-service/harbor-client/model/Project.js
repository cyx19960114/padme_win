/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CVEAllowlist', 'model/ProjectMetadata'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CVEAllowlist'), require('./ProjectMetadata'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.Project = factory(root.HarborApi.ApiClient, root.HarborApi.CVEAllowlist, root.HarborApi.ProjectMetadata);
  }
}(this, function(ApiClient, CVEAllowlist, ProjectMetadata) {
  'use strict';

  /**
   * The Project model module.
   * @module model/Project
   * @version 2.0
   */

  /**
   * Constructs a new <code>Project</code>.
   * @alias module:model/Project
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Project</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Project} obj Optional instance to populate.
   * @return {module:model/Project} The populated <code>Project</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('project_id'))
        obj.projectId = ApiClient.convertToType(data['project_id'], 'Number');
      if (data.hasOwnProperty('owner_id'))
        obj.ownerId = ApiClient.convertToType(data['owner_id'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('registry_id'))
        obj.registryId = ApiClient.convertToType(data['registry_id'], 'Number');
      if (data.hasOwnProperty('creation_time'))
        obj.creationTime = ApiClient.convertToType(data['creation_time'], 'Date');
      if (data.hasOwnProperty('update_time'))
        obj.updateTime = ApiClient.convertToType(data['update_time'], 'Date');
      if (data.hasOwnProperty('deleted'))
        obj.deleted = ApiClient.convertToType(data['deleted'], 'Boolean');
      if (data.hasOwnProperty('owner_name'))
        obj.ownerName = ApiClient.convertToType(data['owner_name'], 'String');
      if (data.hasOwnProperty('togglable'))
        obj.togglable = ApiClient.convertToType(data['togglable'], 'Boolean');
      if (data.hasOwnProperty('current_user_role_id'))
        obj.currentUserRoleId = ApiClient.convertToType(data['current_user_role_id'], 'Number');
      if (data.hasOwnProperty('current_user_role_ids'))
        obj.currentUserRoleIds = ApiClient.convertToType(data['current_user_role_ids'], ['Number']);
      if (data.hasOwnProperty('repo_count'))
        obj.repoCount = ApiClient.convertToType(data['repo_count'], 'Number');
      if (data.hasOwnProperty('chart_count'))
        obj.chartCount = ApiClient.convertToType(data['chart_count'], 'Number');
      if (data.hasOwnProperty('metadata'))
        obj.metadata = ProjectMetadata.constructFromObject(data['metadata']);
      if (data.hasOwnProperty('cve_allowlist'))
        obj.cveAllowlist = CVEAllowlist.constructFromObject(data['cve_allowlist']);
    }
    return obj;
  }

  /**
   * Project ID
   * @member {Number} projectId
   */
  exports.prototype.projectId = undefined;

  /**
   * The owner ID of the project always means the creator of the project.
   * @member {Number} ownerId
   */
  exports.prototype.ownerId = undefined;

  /**
   * The name of the project.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * The ID of referenced registry when the project is a proxy cache project.
   * @member {Number} registryId
   */
  exports.prototype.registryId = undefined;

  /**
   * The creation time of the project.
   * @member {Date} creationTime
   */
  exports.prototype.creationTime = undefined;

  /**
   * The update time of the project.
   * @member {Date} updateTime
   */
  exports.prototype.updateTime = undefined;

  /**
   * A deletion mark of the project.
   * @member {Boolean} deleted
   */
  exports.prototype.deleted = undefined;

  /**
   * The owner name of the project.
   * @member {String} ownerName
   */
  exports.prototype.ownerName = undefined;

  /**
   * Correspond to the UI about whether the project's publicity is  updatable (for UI)
   * @member {Boolean} togglable
   */
  exports.prototype.togglable = undefined;

  /**
   * The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.
   * @member {Number} currentUserRoleId
   */
  exports.prototype.currentUserRoleId = undefined;

  /**
   * The list of role ID of the current user who triggered the API (for UI)
   * @member {Array.<Number>} currentUserRoleIds
   */
  exports.prototype.currentUserRoleIds = undefined;

  /**
   * The number of the repositories under this project.
   * @member {Number} repoCount
   */
  exports.prototype.repoCount = undefined;

  /**
   * The total number of charts under this project.
   * @member {Number} chartCount
   */
  exports.prototype.chartCount = undefined;

  /**
   * The metadata of the project.
   * @member {module:model/ProjectMetadata} metadata
   */
  exports.prototype.metadata = undefined;

  /**
   * The CVE allowlist of this project.
   * @member {module:model/CVEAllowlist} cveAllowlist
   */
  exports.prototype.cveAllowlist = undefined;


  return exports;

}));
