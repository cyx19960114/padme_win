/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.ProjectMetadata = factory(root.HarborApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The ProjectMetadata model module.
   * @module model/ProjectMetadata
   * @version 2.0
   */

  /**
   * Constructs a new <code>ProjectMetadata</code>.
   * @alias module:model/ProjectMetadata
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>ProjectMetadata</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProjectMetadata} obj Optional instance to populate.
   * @return {module:model/ProjectMetadata} The populated <code>ProjectMetadata</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('public'))
        obj._public = ApiClient.convertToType(data['public'], 'String');
      if (data.hasOwnProperty('enable_content_trust'))
        obj.enableContentTrust = ApiClient.convertToType(data['enable_content_trust'], 'String');
      if (data.hasOwnProperty('prevent_vul'))
        obj.preventVul = ApiClient.convertToType(data['prevent_vul'], 'String');
      if (data.hasOwnProperty('severity'))
        obj.severity = ApiClient.convertToType(data['severity'], 'String');
      if (data.hasOwnProperty('auto_scan'))
        obj.autoScan = ApiClient.convertToType(data['auto_scan'], 'String');
      if (data.hasOwnProperty('reuse_sys_cve_allowlist'))
        obj.reuseSysCveAllowlist = ApiClient.convertToType(data['reuse_sys_cve_allowlist'], 'String');
      if (data.hasOwnProperty('retention_id'))
        obj.retentionId = ApiClient.convertToType(data['retention_id'], 'String');
    }
    return obj;
  }

  /**
   * The public status of the project. The valid values are \"true\", \"false\".
   * @member {String} _public
   */
  exports.prototype._public = undefined;

  /**
   * Whether content trust is enabled or not. If it is enabled, user can't pull unsigned images from this project. The valid values are \"true\", \"false\".
   * @member {String} enableContentTrust
   */
  exports.prototype.enableContentTrust = undefined;

  /**
   * Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".
   * @member {String} preventVul
   */
  exports.prototype.preventVul = undefined;

  /**
   * If the vulnerability is high than severity defined here, the images can't be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".
   * @member {String} severity
   */
  exports.prototype.severity = undefined;

  /**
   * Whether scan images automatically when pushing. The valid values are \"true\", \"false\".
   * @member {String} autoScan
   */
  exports.prototype.autoScan = undefined;

  /**
   * Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.
   * @member {String} reuseSysCveAllowlist
   */
  exports.prototype.reuseSysCveAllowlist = undefined;

  /**
   * The ID of the tag retention policy for the project
   * @member {String} retentionId
   */
  exports.prototype.retentionId = undefined;


  return exports;

}));
