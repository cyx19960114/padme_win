/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdditionLinks', 'model/Annotations', 'model/ExtraAttrs', 'model/Label', 'model/Reference', 'model/ScanOverview', 'model/Tag'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AdditionLinks'), require('./Annotations'), require('./ExtraAttrs'), require('./Label'), require('./Reference'), require('./ScanOverview'), require('./Tag'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.Artifact = factory(root.HarborApi.ApiClient, root.HarborApi.AdditionLinks, root.HarborApi.Annotations, root.HarborApi.ExtraAttrs, root.HarborApi.Label, root.HarborApi.Reference, root.HarborApi.ScanOverview, root.HarborApi.Tag);
  }
}(this, function(ApiClient, AdditionLinks, Annotations, ExtraAttrs, Label, Reference, ScanOverview, Tag) {
  'use strict';

  /**
   * The Artifact model module.
   * @module model/Artifact
   * @version 2.0
   */

  /**
   * Constructs a new <code>Artifact</code>.
   * @alias module:model/Artifact
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Artifact</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Artifact} obj Optional instance to populate.
   * @return {module:model/Artifact} The populated <code>Artifact</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('media_type'))
        obj.mediaType = ApiClient.convertToType(data['media_type'], 'String');
      if (data.hasOwnProperty('manifest_media_type'))
        obj.manifestMediaType = ApiClient.convertToType(data['manifest_media_type'], 'String');
      if (data.hasOwnProperty('project_id'))
        obj.projectId = ApiClient.convertToType(data['project_id'], 'Number');
      if (data.hasOwnProperty('repository_id'))
        obj.repositoryId = ApiClient.convertToType(data['repository_id'], 'Number');
      if (data.hasOwnProperty('digest'))
        obj.digest = ApiClient.convertToType(data['digest'], 'String');
      if (data.hasOwnProperty('size'))
        obj.size = ApiClient.convertToType(data['size'], 'Number');
      if (data.hasOwnProperty('icon'))
        obj.icon = ApiClient.convertToType(data['icon'], 'String');
      if (data.hasOwnProperty('push_time'))
        obj.pushTime = ApiClient.convertToType(data['push_time'], 'Date');
      if (data.hasOwnProperty('pull_time'))
        obj.pullTime = ApiClient.convertToType(data['pull_time'], 'Date');
      if (data.hasOwnProperty('extra_attrs'))
        obj.extraAttrs = ExtraAttrs.constructFromObject(data['extra_attrs']);
      if (data.hasOwnProperty('annotations'))
        obj.annotations = Annotations.constructFromObject(data['annotations']);
      if (data.hasOwnProperty('references'))
        obj.references = ApiClient.convertToType(data['references'], [Reference]);
      if (data.hasOwnProperty('tags'))
        obj.tags = ApiClient.convertToType(data['tags'], [Tag]);
      if (data.hasOwnProperty('addition_links'))
        obj.additionLinks = AdditionLinks.constructFromObject(data['addition_links']);
      if (data.hasOwnProperty('labels'))
        obj.labels = ApiClient.convertToType(data['labels'], [Label]);
      if (data.hasOwnProperty('scan_overview'))
        obj.scanOverview = ScanOverview.constructFromObject(data['scan_overview']);
    }
    return obj;
  }

  /**
   * The ID of the artifact
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * The type of the artifact, e.g. image, chart, etc
   * @member {String} type
   */
  exports.prototype.type = undefined;

  /**
   * The media type of the artifact
   * @member {String} mediaType
   */
  exports.prototype.mediaType = undefined;

  /**
   * The manifest media type of the artifact
   * @member {String} manifestMediaType
   */
  exports.prototype.manifestMediaType = undefined;

  /**
   * The ID of the project that the artifact belongs to
   * @member {Number} projectId
   */
  exports.prototype.projectId = undefined;

  /**
   * The ID of the repository that the artifact belongs to
   * @member {Number} repositoryId
   */
  exports.prototype.repositoryId = undefined;

  /**
   * The digest of the artifact
   * @member {String} digest
   */
  exports.prototype.digest = undefined;

  /**
   * The size of the artifact
   * @member {Number} size
   */
  exports.prototype.size = undefined;

  /**
   * The digest of the icon
   * @member {String} icon
   */
  exports.prototype.icon = undefined;

  /**
   * The push time of the artifact
   * @member {Date} pushTime
   */
  exports.prototype.pushTime = undefined;

  /**
   * The latest pull time of the artifact
   * @member {Date} pullTime
   */
  exports.prototype.pullTime = undefined;

  /**
   * @member {module:model/ExtraAttrs} extraAttrs
   */
  exports.prototype.extraAttrs = undefined;

  /**
   * @member {module:model/Annotations} annotations
   */
  exports.prototype.annotations = undefined;

  /**
   * @member {Array.<module:model/Reference>} references
   */
  exports.prototype.references = undefined;

  /**
   * @member {Array.<module:model/Tag>} tags
   */
  exports.prototype.tags = undefined;

  /**
   * @member {module:model/AdditionLinks} additionLinks
   */
  exports.prototype.additionLinks = undefined;

  /**
   * @member {Array.<module:model/Label>} labels
   */
  exports.prototype.labels = undefined;

  /**
   * The overview of the scan result.
   * @member {module:model/ScanOverview} scanOverview
   */
  exports.prototype.scanOverview = undefined;


  return exports;

}));
