/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.Configurations = factory(root.HarborApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Configurations model module.
   * @module model/Configurations
   * @version 2.0
   */

  /**
   * Constructs a new <code>Configurations</code>.
   * @alias module:model/Configurations
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Configurations</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Configurations} obj Optional instance to populate.
   * @return {module:model/Configurations} The populated <code>Configurations</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('auth_mode'))
        obj.authMode = ApiClient.convertToType(data['auth_mode'], 'String');
      if (data.hasOwnProperty('count_per_project'))
        obj.countPerProject = ApiClient.convertToType(data['count_per_project'], 'String');
      if (data.hasOwnProperty('email_from'))
        obj.emailFrom = ApiClient.convertToType(data['email_from'], 'String');
      if (data.hasOwnProperty('email_host'))
        obj.emailHost = ApiClient.convertToType(data['email_host'], 'String');
      if (data.hasOwnProperty('email_port'))
        obj.emailPort = ApiClient.convertToType(data['email_port'], 'Number');
      if (data.hasOwnProperty('email_identity'))
        obj.emailIdentity = ApiClient.convertToType(data['email_identity'], 'String');
      if (data.hasOwnProperty('email_username'))
        obj.emailUsername = ApiClient.convertToType(data['email_username'], 'String');
      if (data.hasOwnProperty('email_ssl'))
        obj.emailSsl = ApiClient.convertToType(data['email_ssl'], 'Boolean');
      if (data.hasOwnProperty('email_insecure'))
        obj.emailInsecure = ApiClient.convertToType(data['email_insecure'], 'Boolean');
      if (data.hasOwnProperty('ldap_url'))
        obj.ldapUrl = ApiClient.convertToType(data['ldap_url'], 'String');
      if (data.hasOwnProperty('ldap_base_dn'))
        obj.ldapBaseDn = ApiClient.convertToType(data['ldap_base_dn'], 'String');
      if (data.hasOwnProperty('ldap_filter'))
        obj.ldapFilter = ApiClient.convertToType(data['ldap_filter'], 'String');
      if (data.hasOwnProperty('ldap_scope'))
        obj.ldapScope = ApiClient.convertToType(data['ldap_scope'], 'Number');
      if (data.hasOwnProperty('ldap_uid'))
        obj.ldapUid = ApiClient.convertToType(data['ldap_uid'], 'String');
      if (data.hasOwnProperty('ldap_search_dn'))
        obj.ldapSearchDn = ApiClient.convertToType(data['ldap_search_dn'], 'String');
      if (data.hasOwnProperty('ldap_timeout'))
        obj.ldapTimeout = ApiClient.convertToType(data['ldap_timeout'], 'Number');
      if (data.hasOwnProperty('ldap_group_attribute_name'))
        obj.ldapGroupAttributeName = ApiClient.convertToType(data['ldap_group_attribute_name'], 'String');
      if (data.hasOwnProperty('ldap_group_base_dn'))
        obj.ldapGroupBaseDn = ApiClient.convertToType(data['ldap_group_base_dn'], 'String');
      if (data.hasOwnProperty('ldap_group_search_filter'))
        obj.ldapGroupSearchFilter = ApiClient.convertToType(data['ldap_group_search_filter'], 'String');
      if (data.hasOwnProperty('ldap_group_search_scope'))
        obj.ldapGroupSearchScope = ApiClient.convertToType(data['ldap_group_search_scope'], 'Number');
      if (data.hasOwnProperty('ldap_group_admin_dn'))
        obj.ldapGroupAdminDn = ApiClient.convertToType(data['ldap_group_admin_dn'], 'String');
      if (data.hasOwnProperty('oidc_client_id'))
        obj.oidcClientId = ApiClient.convertToType(data['oidc_client_id'], 'String');
      if (data.hasOwnProperty('oidc_client_secret'))
        obj.oidcClientSecret = ApiClient.convertToType(data['oidc_client_secret'], 'String');
      if (data.hasOwnProperty('oidc_endpoint'))
        obj.oidcEndpoint = ApiClient.convertToType(data['oidc_endpoint'], 'String');
      if (data.hasOwnProperty('oidc_name'))
        obj.oidcName = ApiClient.convertToType(data['oidc_name'], 'String');
      if (data.hasOwnProperty('oidc_scope'))
        obj.oidcScope = ApiClient.convertToType(data['oidc_scope'], 'String');
      if (data.hasOwnProperty('oidc_verify_cert'))
        obj.oidcVerifyCert = ApiClient.convertToType(data['oidc_verify_cert'], 'Boolean');
      if (data.hasOwnProperty('project_creation_restriction'))
        obj.projectCreationRestriction = ApiClient.convertToType(data['project_creation_restriction'], 'String');
      if (data.hasOwnProperty('quota_per_project_enable'))
        obj.quotaPerProjectEnable = ApiClient.convertToType(data['quota_per_project_enable'], 'Boolean');
      if (data.hasOwnProperty('read_only'))
        obj.readOnly = ApiClient.convertToType(data['read_only'], 'Boolean');
      if (data.hasOwnProperty('self_registration'))
        obj.selfRegistration = ApiClient.convertToType(data['self_registration'], 'Boolean');
      if (data.hasOwnProperty('storage_per_project'))
        obj.storagePerProject = ApiClient.convertToType(data['storage_per_project'], 'String');
      if (data.hasOwnProperty('token_expiration'))
        obj.tokenExpiration = ApiClient.convertToType(data['token_expiration'], 'Number');
      if (data.hasOwnProperty('verify_remote_cert'))
        obj.verifyRemoteCert = ApiClient.convertToType(data['verify_remote_cert'], 'Boolean');
      if (data.hasOwnProperty('scan_all_policy'))
        obj.scanAllPolicy = ApiClient.convertToType(data['scan_all_policy'], Object);
    }
    return obj;
  }

  /**
   * The auth mode of current system, such as \"db_auth\", \"ldap_auth\"
   * @member {String} authMode
   */
  exports.prototype.authMode = undefined;

  /**
   * The default count quota for the new created projects.
   * @member {String} countPerProject
   */
  exports.prototype.countPerProject = undefined;

  /**
   * The sender name for Email notification.
   * @member {String} emailFrom
   */
  exports.prototype.emailFrom = undefined;

  /**
   * The hostname of SMTP server that sends Email notification.
   * @member {String} emailHost
   */
  exports.prototype.emailHost = undefined;

  /**
   * The port of SMTP server.
   * @member {Number} emailPort
   */
  exports.prototype.emailPort = undefined;

  /**
   * By default it's empty so the email_username is picked.
   * @member {String} emailIdentity
   */
  exports.prototype.emailIdentity = undefined;

  /**
   * The username for authenticate against SMTP server.
   * @member {String} emailUsername
   */
  exports.prototype.emailUsername = undefined;

  /**
   * When it's set to true the system will access Email server via TLS by default.  If it's set to false, it still will handle \"STARTTLS\" from server side.
   * @member {Boolean} emailSsl
   */
  exports.prototype.emailSsl = undefined;

  /**
   * Whether or not the certificate will be verified when Harbor tries to access the email server.
   * @member {Boolean} emailInsecure
   */
  exports.prototype.emailInsecure = undefined;

  /**
   * The URL of LDAP server.
   * @member {String} ldapUrl
   */
  exports.prototype.ldapUrl = undefined;

  /**
   * The Base DN for LDAP binding.
   * @member {String} ldapBaseDn
   */
  exports.prototype.ldapBaseDn = undefined;

  /**
   * The filter for LDAP binding.
   * @member {String} ldapFilter
   */
  exports.prototype.ldapFilter = undefined;

  /**
   * 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE
   * @member {Number} ldapScope
   */
  exports.prototype.ldapScope = undefined;

  /**
   * The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"
   * @member {String} ldapUid
   */
  exports.prototype.ldapUid = undefined;

  /**
   * The DN of the user to do the search.
   * @member {String} ldapSearchDn
   */
  exports.prototype.ldapSearchDn = undefined;

  /**
   * timeout in seconds for connection to LDAP server.
   * @member {Number} ldapTimeout
   */
  exports.prototype.ldapTimeout = undefined;

  /**
   * The attribute which is used as identity of the LDAP group, default is cn.
   * @member {String} ldapGroupAttributeName
   */
  exports.prototype.ldapGroupAttributeName = undefined;

  /**
   * The base DN to search LDAP group.
   * @member {String} ldapGroupBaseDn
   */
  exports.prototype.ldapGroupBaseDn = undefined;

  /**
   * The filter to search the ldap group.
   * @member {String} ldapGroupSearchFilter
   */
  exports.prototype.ldapGroupSearchFilter = undefined;

  /**
   * The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'
   * @member {Number} ldapGroupSearchScope
   */
  exports.prototype.ldapGroupSearchScope = undefined;

  /**
   * Specify the ldap group which have the same privilege with Harbor admin.
   * @member {String} ldapGroupAdminDn
   */
  exports.prototype.ldapGroupAdminDn = undefined;

  /**
   * The client id of the OIDC.
   * @member {String} oidcClientId
   */
  exports.prototype.oidcClientId = undefined;

  /**
   * The client secret of the OIDC.
   * @member {String} oidcClientSecret
   */
  exports.prototype.oidcClientSecret = undefined;

  /**
   * The URL of an OIDC-complaint server, must start with 'https://'.
   * @member {String} oidcEndpoint
   */
  exports.prototype.oidcEndpoint = undefined;

  /**
   * The name of the OIDC provider.
   * @member {String} oidcName
   */
  exports.prototype.oidcName = undefined;

  /**
   * The scope sent to OIDC server during authentication, should be separated by comma. It has to contain “openid”, and “offline_access”. If you are using google, please remove “offline_access” from this field.
   * @member {String} oidcScope
   */
  exports.prototype.oidcScope = undefined;

  /**
   * Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.
   * @member {Boolean} oidcVerifyCert
   */
  exports.prototype.oidcVerifyCert = undefined;

  /**
   * This attribute restricts what users have the permission to create project.  It can be \"everyone\" or \"adminonly\".
   * @member {String} projectCreationRestriction
   */
  exports.prototype.projectCreationRestriction = undefined;

  /**
   * This attribute indicates whether quota per project enabled in harbor
   * @member {Boolean} quotaPerProjectEnable
   */
  exports.prototype.quotaPerProjectEnable = undefined;

  /**
   * 'docker push' is prohibited by Harbor if you set it to true.   
   * @member {Boolean} readOnly
   */
  exports.prototype.readOnly = undefined;

  /**
   * Whether the Harbor instance supports self-registration.  If it's set to false, admin need to add user to the instance.
   * @member {Boolean} selfRegistration
   */
  exports.prototype.selfRegistration = undefined;

  /**
   * The default storage quota for the new created projects.
   * @member {String} storagePerProject
   */
  exports.prototype.storagePerProject = undefined;

  /**
   * The expiration time of the token for internal Registry, in minutes.
   * @member {Number} tokenExpiration
   */
  exports.prototype.tokenExpiration = undefined;

  /**
   * Whether or not the certificate will be verified when Harbor tries to access a remote Harbor instance for replication.
   * @member {Boolean} verifyRemoteCert
   */
  exports.prototype.verifyRemoteCert = undefined;

  /**
   * @member {Object} scanAllPolicy
   */
  exports.prototype.scanAllPolicy = undefined;


  return exports;

}));
