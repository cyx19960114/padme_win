/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.ProjectMemberEntity = factory(root.HarborApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The ProjectMemberEntity model module.
   * @module model/ProjectMemberEntity
   * @version 2.0
   */

  /**
   * Constructs a new <code>ProjectMemberEntity</code>.
   * @alias module:model/ProjectMemberEntity
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>ProjectMemberEntity</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProjectMemberEntity} obj Optional instance to populate.
   * @return {module:model/ProjectMemberEntity} The populated <code>ProjectMemberEntity</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('project_id'))
        obj.projectId = ApiClient.convertToType(data['project_id'], 'Number');
      if (data.hasOwnProperty('entity_name'))
        obj.entityName = ApiClient.convertToType(data['entity_name'], 'String');
      if (data.hasOwnProperty('role_name'))
        obj.roleName = ApiClient.convertToType(data['role_name'], 'String');
      if (data.hasOwnProperty('role_id'))
        obj.roleId = ApiClient.convertToType(data['role_id'], 'Number');
      if (data.hasOwnProperty('entity_id'))
        obj.entityId = ApiClient.convertToType(data['entity_id'], 'Number');
      if (data.hasOwnProperty('entity_type'))
        obj.entityType = ApiClient.convertToType(data['entity_type'], 'String');
    }
    return obj;
  }

  /**
   * the project member id
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * the project id
   * @member {Number} projectId
   */
  exports.prototype.projectId = undefined;

  /**
   * the name of the group member.
   * @member {String} entityName
   */
  exports.prototype.entityName = undefined;

  /**
   * the name of the role
   * @member {String} roleName
   */
  exports.prototype.roleName = undefined;

  /**
   * the role id
   * @member {Number} roleId
   */
  exports.prototype.roleId = undefined;

  /**
   * the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user group's ID in user_group table.
   * @member {Number} entityId
   */
  exports.prototype.entityId = undefined;

  /**
   * the entity's type, u for user entity, g for group entity.
   * @member {String} entityType
   */
  exports.prototype.entityType = undefined;


  return exports;

}));
