/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthproxySetting'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AuthproxySetting'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.GeneralInfo = factory(root.HarborApi.ApiClient, root.HarborApi.AuthproxySetting);
  }
}(this, function(ApiClient, AuthproxySetting) {
  'use strict';

  /**
   * The GeneralInfo model module.
   * @module model/GeneralInfo
   * @version 2.0
   */

  /**
   * Constructs a new <code>GeneralInfo</code>.
   * @alias module:model/GeneralInfo
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>GeneralInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GeneralInfo} obj Optional instance to populate.
   * @return {module:model/GeneralInfo} The populated <code>GeneralInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('with_notary'))
        obj.withNotary = ApiClient.convertToType(data['with_notary'], 'Boolean');
      if (data.hasOwnProperty('with_chartmuseum'))
        obj.withChartmuseum = ApiClient.convertToType(data['with_chartmuseum'], 'Boolean');
      if (data.hasOwnProperty('registry_url'))
        obj.registryUrl = ApiClient.convertToType(data['registry_url'], 'String');
      if (data.hasOwnProperty('external_url'))
        obj.externalUrl = ApiClient.convertToType(data['external_url'], 'String');
      if (data.hasOwnProperty('auth_mode'))
        obj.authMode = ApiClient.convertToType(data['auth_mode'], 'String');
      if (data.hasOwnProperty('project_creation_restriction'))
        obj.projectCreationRestriction = ApiClient.convertToType(data['project_creation_restriction'], 'String');
      if (data.hasOwnProperty('self_registration'))
        obj.selfRegistration = ApiClient.convertToType(data['self_registration'], 'Boolean');
      if (data.hasOwnProperty('has_ca_root'))
        obj.hasCaRoot = ApiClient.convertToType(data['has_ca_root'], 'Boolean');
      if (data.hasOwnProperty('harbor_version'))
        obj.harborVersion = ApiClient.convertToType(data['harbor_version'], 'String');
      if (data.hasOwnProperty('registry_storage_provider_name'))
        obj.registryStorageProviderName = ApiClient.convertToType(data['registry_storage_provider_name'], 'String');
      if (data.hasOwnProperty('read_only'))
        obj.readOnly = ApiClient.convertToType(data['read_only'], 'Boolean');
      if (data.hasOwnProperty('notification_enable'))
        obj.notificationEnable = ApiClient.convertToType(data['notification_enable'], 'Boolean');
      if (data.hasOwnProperty('authproxy_settings'))
        obj.authproxySettings = AuthproxySetting.constructFromObject(data['authproxy_settings']);
    }
    return obj;
  }

  /**
   * If the Harbor instance is deployed with nested notary.
   * @member {Boolean} withNotary
   */
  exports.prototype.withNotary = undefined;

  /**
   * If the Harbor instance is deployed with nested chartmuseum.
   * @member {Boolean} withChartmuseum
   */
  exports.prototype.withChartmuseum = undefined;

  /**
   * The url of registry against which the docker command should be issued.
   * @member {String} registryUrl
   */
  exports.prototype.registryUrl = undefined;

  /**
   * The external URL of Harbor, with protocol.
   * @member {String} externalUrl
   */
  exports.prototype.externalUrl = undefined;

  /**
   * The auth mode of current Harbor instance.
   * @member {String} authMode
   */
  exports.prototype.authMode = undefined;

  /**
   * Indicate who can create projects, it could be 'adminonly' or 'everyone'.
   * @member {String} projectCreationRestriction
   */
  exports.prototype.projectCreationRestriction = undefined;

  /**
   * Indicate whether the Harbor instance enable user to register himself.
   * @member {Boolean} selfRegistration
   */
  exports.prototype.selfRegistration = undefined;

  /**
   * Indicate whether there is a ca root cert file ready for download in the file system.
   * @member {Boolean} hasCaRoot
   */
  exports.prototype.hasCaRoot = undefined;

  /**
   * The build version of Harbor.
   * @member {String} harborVersion
   */
  exports.prototype.harborVersion = undefined;

  /**
   * The storage provider's name of Harbor registry
   * @member {String} registryStorageProviderName
   */
  exports.prototype.registryStorageProviderName = undefined;

  /**
   * The flag to indicate whether Harbor is in readonly mode.
   * @member {Boolean} readOnly
   */
  exports.prototype.readOnly = undefined;

  /**
   * The flag to indicate whether notification mechanism is enabled on Harbor instance.
   * @member {Boolean} notificationEnable
   */
  exports.prototype.notificationEnable = undefined;

  /**
   * The setting of auth proxy this is only available when Harbor relies on authproxy for authentication.
   * @member {module:model/AuthproxySetting} authproxySettings
   */
  exports.prototype.authproxySettings = undefined;


  return exports;

}));
