/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.ChartMetadata = factory(root.HarborApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The ChartMetadata model module.
   * @module model/ChartMetadata
   * @version 2.0
   */

  /**
   * Constructs a new <code>ChartMetadata</code>.
   * The metadata of chart version
   * @alias module:model/ChartMetadata
   * @class
   * @param name {String} The name of the chart
   * @param version {String} A SemVer 2 version of chart
   * @param engine {String} The name of template engine
   * @param icon {String} The URL to an icon file
   * @param apiVersion {String} The API version of this chart
   * @param appVersion {String} The version of the application enclosed in the chart
   */
  var exports = function(name, version, engine, icon, apiVersion, appVersion) {
    this.name = name;
    this.version = version;
    this.engine = engine;
    this.icon = icon;
    this.apiVersion = apiVersion;
    this.appVersion = appVersion;
  };

  /**
   * Constructs a <code>ChartMetadata</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChartMetadata} obj Optional instance to populate.
   * @return {module:model/ChartMetadata} The populated <code>ChartMetadata</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('home'))
        obj.home = ApiClient.convertToType(data['home'], 'String');
      if (data.hasOwnProperty('sources'))
        obj.sources = ApiClient.convertToType(data['sources'], ['String']);
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('keywords'))
        obj.keywords = ApiClient.convertToType(data['keywords'], ['String']);
      if (data.hasOwnProperty('engine'))
        obj.engine = ApiClient.convertToType(data['engine'], 'String');
      if (data.hasOwnProperty('icon'))
        obj.icon = ApiClient.convertToType(data['icon'], 'String');
      if (data.hasOwnProperty('apiVersion'))
        obj.apiVersion = ApiClient.convertToType(data['apiVersion'], 'String');
      if (data.hasOwnProperty('appVersion'))
        obj.appVersion = ApiClient.convertToType(data['appVersion'], 'String');
      if (data.hasOwnProperty('deprecated'))
        obj.deprecated = ApiClient.convertToType(data['deprecated'], 'Boolean');
    }
    return obj;
  }

  /**
   * The name of the chart
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * The URL to the relevant project page
   * @member {String} home
   */
  exports.prototype.home = undefined;

  /**
   * The URL to the source code of chart
   * @member {Array.<String>} sources
   */
  exports.prototype.sources = undefined;

  /**
   * A SemVer 2 version of chart
   * @member {String} version
   */
  exports.prototype.version = undefined;

  /**
   * A one-sentence description of chart
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * A list of string keywords
   * @member {Array.<String>} keywords
   */
  exports.prototype.keywords = undefined;

  /**
   * The name of template engine
   * @member {String} engine
   */
  exports.prototype.engine = undefined;

  /**
   * The URL to an icon file
   * @member {String} icon
   */
  exports.prototype.icon = undefined;

  /**
   * The API version of this chart
   * @member {String} apiVersion
   */
  exports.prototype.apiVersion = undefined;

  /**
   * The version of the application enclosed in the chart
   * @member {String} appVersion
   */
  exports.prototype.appVersion = undefined;

  /**
   * Whether or not this chart is deprecated
   * @member {Boolean} deprecated
   */
  exports.prototype.deprecated = undefined;


  return exports;

}));
