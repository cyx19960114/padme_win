/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.ReplicationExecution = factory(root.HarborApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The ReplicationExecution model module.
   * @module model/ReplicationExecution
   * @version 2.0
   */

  /**
   * Constructs a new <code>ReplicationExecution</code>.
   * The replication execution
   * @alias module:model/ReplicationExecution
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>ReplicationExecution</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ReplicationExecution} obj Optional instance to populate.
   * @return {module:model/ReplicationExecution} The populated <code>ReplicationExecution</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('policy_id'))
        obj.policyId = ApiClient.convertToType(data['policy_id'], 'Number');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('trigger'))
        obj.trigger = ApiClient.convertToType(data['trigger'], 'String');
      if (data.hasOwnProperty('start_time'))
        obj.startTime = ApiClient.convertToType(data['start_time'], 'Date');
      if (data.hasOwnProperty('end_time'))
        obj.endTime = ApiClient.convertToType(data['end_time'], 'Date');
      if (data.hasOwnProperty('status_text'))
        obj.statusText = ApiClient.convertToType(data['status_text'], 'String');
      if (data.hasOwnProperty('total'))
        obj.total = ApiClient.convertToType(data['total'], 'Number');
      if (data.hasOwnProperty('failed'))
        obj.failed = ApiClient.convertToType(data['failed'], 'Number');
      if (data.hasOwnProperty('succeed'))
        obj.succeed = ApiClient.convertToType(data['succeed'], 'Number');
      if (data.hasOwnProperty('in_progress'))
        obj.inProgress = ApiClient.convertToType(data['in_progress'], 'Number');
      if (data.hasOwnProperty('stopped'))
        obj.stopped = ApiClient.convertToType(data['stopped'], 'Number');
    }
    return obj;
  }

  /**
   * The ID of the execution
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * The ID if the policy that the execution belongs to
   * @member {Number} policyId
   */
  exports.prototype.policyId = undefined;

  /**
   * The status of the execution
   * @member {String} status
   */
  exports.prototype.status = undefined;

  /**
   * The trigger mode
   * @member {String} trigger
   */
  exports.prototype.trigger = undefined;

  /**
   * The start time
   * @member {Date} startTime
   */
  exports.prototype.startTime = undefined;

  /**
   * The end time
   * @member {Date} endTime
   */
  exports.prototype.endTime = undefined;

  /**
   * The status text
   * @member {String} statusText
   */
  exports.prototype.statusText = undefined;

  /**
   * The total count of all executions
   * @member {Number} total
   */
  exports.prototype.total = undefined;

  /**
   * The count of failed executions
   * @member {Number} failed
   */
  exports.prototype.failed = undefined;

  /**
   * The count of succeed executions
   * @member {Number} succeed
   */
  exports.prototype.succeed = undefined;

  /**
   * The count of in_progress executions
   * @member {Number} inProgress
   */
  exports.prototype.inProgress = undefined;

  /**
   * The count of stopped executions
   * @member {Number} stopped
   */
  exports.prototype.stopped = undefined;


  return exports;

}));
