/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RegistryCredential'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./RegistryCredential'));
  } else {
    // Browser globals (root is window)
    if (!root.HarborApi) {
      root.HarborApi = {};
    }
    root.HarborApi.Registry = factory(root.HarborApi.ApiClient, root.HarborApi.RegistryCredential);
  }
}(this, function(ApiClient, RegistryCredential) {
  'use strict';

  /**
   * The Registry model module.
   * @module model/Registry
   * @version 2.0
   */

  /**
   * Constructs a new <code>Registry</code>.
   * @alias module:model/Registry
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Registry</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Registry} obj Optional instance to populate.
   * @return {module:model/Registry} The populated <code>Registry</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('credential'))
        obj.credential = RegistryCredential.constructFromObject(data['credential']);
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('insecure'))
        obj.insecure = ApiClient.convertToType(data['insecure'], 'Boolean');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('creation_time'))
        obj.creationTime = ApiClient.convertToType(data['creation_time'], 'String');
      if (data.hasOwnProperty('update_time'))
        obj.updateTime = ApiClient.convertToType(data['update_time'], 'String');
    }
    return obj;
  }

  /**
   * The registry ID.
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * The registry URL string.
   * @member {String} url
   */
  exports.prototype.url = undefined;

  /**
   * The registry name.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * @member {module:model/RegistryCredential} credential
   */
  exports.prototype.credential = undefined;

  /**
   * Type of the registry, e.g. 'harbor'.
   * @member {String} type
   */
  exports.prototype.type = undefined;

  /**
   * Whether or not the certificate will be verified when Harbor tries to access the server.
   * @member {Boolean} insecure
   */
  exports.prototype.insecure = undefined;

  /**
   * Description of the registry.
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * Health status of the registry.
   * @member {String} status
   */
  exports.prototype.status = undefined;

  /**
   * The create time of the policy.
   * @member {String} creationTime
   */
  exports.prototype.creationTime = undefined;

  /**
   * The update time of the policy.
   * @member {String} updateTime
   */
  exports.prototype.updateTime = undefined;


  return exports;

}));
