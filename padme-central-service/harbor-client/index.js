/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Access', 'model/AdditionLink', 'model/AdditionLinks', 'model/Annotations', 'model/Artifact', 'model/AuditLog', 'model/AuthproxySetting', 'model/BadRequestFormatedError', 'model/BoolConfigItem', 'model/CVEAllowlist', 'model/CVEAllowlistItem', 'model/ChartAPIError', 'model/ChartMetadata', 'model/ChartVersion', 'model/CliSecretInput', 'model/ComponentHealthStatus', 'model/ComponentOverviewEntry', 'model/Configurations', 'model/ConfigurationsResponse', 'model/ConflictFormatedError', 'model/EmailServerSetting', 'model/Error', 'model/Errors', 'model/EventType', 'model/Execution', 'model/ExtraAttrs', 'model/FilterStyle', 'model/ForbiddenChartAPIError', 'model/GCHistory', 'model/GeneralInfo', 'model/Icon', 'model/ImmutableRule', 'model/ImmutableSelector', 'model/Instance', 'model/InsufficientStorageChartAPIError', 'model/IntegerConfigItem', 'model/InternalChartAPIError', 'model/IsDefault', 'model/Label', 'model/Labels', 'model/LdapConf', 'model/LdapFailedImportUsers', 'model/LdapImportUsers', 'model/LdapUsers', 'model/Metadata', 'model/Metrics', 'model/Namespace', 'model/NativeReportSummary', 'model/NotFoundChartAPIError', 'model/NotifyType', 'model/OverallHealthStatus', 'model/Password', 'model/Permission', 'model/PingEndpoint', 'model/PingRegistry', 'model/Platform', 'model/PreheatPolicy', 'model/Project', 'model/ProjectDeletable', 'model/ProjectMember', 'model/ProjectMemberEntity', 'model/ProjectMetadata', 'model/ProjectReq', 'model/ProjectScanner', 'model/ProjectSummary', 'model/ProviderUnderProject', 'model/PutRegistry', 'model/Quota', 'model/QuotaRefObject', 'model/QuotaSwitcher', 'model/QuotaUpdateReq', 'model/Reference', 'model/Registry', 'model/RegistryCredential', 'model/RegistryInfo', 'model/ReplicationExecution', 'model/ReplicationFilter', 'model/ReplicationPolicy', 'model/ReplicationTask', 'model/ReplicationTrigger', 'model/Repository', 'model/ResourceList', 'model/RetentionExecution', 'model/RetentionExecutionStop', 'model/RetentionExecutionTask', 'model/RetentionExecutionTrigger', 'model/RetentionMetadata', 'model/RetentionPolicy', 'model/RetentionPolicyScope', 'model/RetentionRule', 'model/RetentionRuleMetadata', 'model/RetentionRuleParamMetadata', 'model/RetentionRuleTrigger', 'model/RetentionSelector', 'model/RetentionSelectorMetadata', 'model/Robot', 'model/RobotCreate', 'model/RobotCreateV1', 'model/RobotCreated', 'model/RobotPermission', 'model/RobotSec', 'model/Role', 'model/RoleParam', 'model/RoleRequest', 'model/ScanOverview', 'model/Scanner', 'model/ScannerAdapterMetadata', 'model/ScannerCapability', 'model/ScannerRegistration', 'model/ScannerRegistrationReq', 'model/ScannerRegistrationSettings', 'model/Schedule', 'model/ScheduleObj', 'model/Search', 'model/SearchRepository', 'model/SearchResult', 'model/StartReplicationExecution', 'model/StatisticMap', 'model/Stats', 'model/Storage', 'model/StringConfigItem', 'model/SupportedWebhookEventTypes', 'model/SysAdminFlag', 'model/SystemInfo', 'model/Tag', 'model/Task', 'model/TriggerSettings', 'model/UnauthorizedChartAPIError', 'model/User', 'model/UserEntity', 'model/UserGroup', 'model/UserProfile', 'model/UserSearch', 'model/VulnerabilitySummary', 'model/WebhookJob', 'model/WebhookLastTrigger', 'model/WebhookPolicy', 'model/WebhookTargetObject', 'api/ArtifactApi', 'api/AuditlogApi', 'api/ChartRepositoryApi', 'api/GcApi', 'api/IconApi', 'api/LabelApi', 'api/PingApi', 'api/PreheatApi', 'api/ProductsApi', 'api/ProjectApi', 'api/QuotaApi', 'api/ReplicationApi', 'api/RepositoryApi', 'api/RetentionApi', 'api/RobotApi', 'api/Robotv1Api', 'api/ScanApi', 'api/ScanAllApi', 'api/ScannersApi', 'api/SystemApi', 'api/SysteminfoApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Access'), require('./model/AdditionLink'), require('./model/AdditionLinks'), require('./model/Annotations'), require('./model/Artifact'), require('./model/AuditLog'), require('./model/AuthproxySetting'), require('./model/BadRequestFormatedError'), require('./model/BoolConfigItem'), require('./model/CVEAllowlist'), require('./model/CVEAllowlistItem'), require('./model/ChartAPIError'), require('./model/ChartMetadata'), require('./model/ChartVersion'), require('./model/CliSecretInput'), require('./model/ComponentHealthStatus'), require('./model/ComponentOverviewEntry'), require('./model/Configurations'), require('./model/ConfigurationsResponse'), require('./model/ConflictFormatedError'), require('./model/EmailServerSetting'), require('./model/Error'), require('./model/Errors'), require('./model/EventType'), require('./model/Execution'), require('./model/ExtraAttrs'), require('./model/FilterStyle'), require('./model/ForbiddenChartAPIError'), require('./model/GCHistory'), require('./model/GeneralInfo'), require('./model/Icon'), require('./model/ImmutableRule'), require('./model/ImmutableSelector'), require('./model/Instance'), require('./model/InsufficientStorageChartAPIError'), require('./model/IntegerConfigItem'), require('./model/InternalChartAPIError'), require('./model/IsDefault'), require('./model/Label'), require('./model/Labels'), require('./model/LdapConf'), require('./model/LdapFailedImportUsers'), require('./model/LdapImportUsers'), require('./model/LdapUsers'), require('./model/Metadata'), require('./model/Metrics'), require('./model/Namespace'), require('./model/NativeReportSummary'), require('./model/NotFoundChartAPIError'), require('./model/NotifyType'), require('./model/OverallHealthStatus'), require('./model/Password'), require('./model/Permission'), require('./model/PingEndpoint'), require('./model/PingRegistry'), require('./model/Platform'), require('./model/PreheatPolicy'), require('./model/Project'), require('./model/ProjectDeletable'), require('./model/ProjectMember'), require('./model/ProjectMemberEntity'), require('./model/ProjectMetadata'), require('./model/ProjectReq'), require('./model/ProjectScanner'), require('./model/ProjectSummary'), require('./model/ProviderUnderProject'), require('./model/PutRegistry'), require('./model/Quota'), require('./model/QuotaRefObject'), require('./model/QuotaSwitcher'), require('./model/QuotaUpdateReq'), require('./model/Reference'), require('./model/Registry'), require('./model/RegistryCredential'), require('./model/RegistryInfo'), require('./model/ReplicationExecution'), require('./model/ReplicationFilter'), require('./model/ReplicationPolicy'), require('./model/ReplicationTask'), require('./model/ReplicationTrigger'), require('./model/Repository'), require('./model/ResourceList'), require('./model/RetentionExecution'), require('./model/RetentionExecutionStop'), require('./model/RetentionExecutionTask'), require('./model/RetentionExecutionTrigger'), require('./model/RetentionMetadata'), require('./model/RetentionPolicy'), require('./model/RetentionPolicyScope'), require('./model/RetentionRule'), require('./model/RetentionRuleMetadata'), require('./model/RetentionRuleParamMetadata'), require('./model/RetentionRuleTrigger'), require('./model/RetentionSelector'), require('./model/RetentionSelectorMetadata'), require('./model/Robot'), require('./model/RobotCreate'), require('./model/RobotCreateV1'), require('./model/RobotCreated'), require('./model/RobotPermission'), require('./model/RobotSec'), require('./model/Role'), require('./model/RoleParam'), require('./model/RoleRequest'), require('./model/ScanOverview'), require('./model/Scanner'), require('./model/ScannerAdapterMetadata'), require('./model/ScannerCapability'), require('./model/ScannerRegistration'), require('./model/ScannerRegistrationReq'), require('./model/ScannerRegistrationSettings'), require('./model/Schedule'), require('./model/ScheduleObj'), require('./model/Search'), require('./model/SearchRepository'), require('./model/SearchResult'), require('./model/StartReplicationExecution'), require('./model/StatisticMap'), require('./model/Stats'), require('./model/Storage'), require('./model/StringConfigItem'), require('./model/SupportedWebhookEventTypes'), require('./model/SysAdminFlag'), require('./model/SystemInfo'), require('./model/Tag'), require('./model/Task'), require('./model/TriggerSettings'), require('./model/UnauthorizedChartAPIError'), require('./model/User'), require('./model/UserEntity'), require('./model/UserGroup'), require('./model/UserProfile'), require('./model/UserSearch'), require('./model/VulnerabilitySummary'), require('./model/WebhookJob'), require('./model/WebhookLastTrigger'), require('./model/WebhookPolicy'), require('./model/WebhookTargetObject'), require('./api/ArtifactApi'), require('./api/AuditlogApi'), require('./api/ChartRepositoryApi'), require('./api/GcApi'), require('./api/IconApi'), require('./api/LabelApi'), require('./api/PingApi'), require('./api/PreheatApi'), require('./api/ProductsApi'), require('./api/ProjectApi'), require('./api/QuotaApi'), require('./api/ReplicationApi'), require('./api/RepositoryApi'), require('./api/RetentionApi'), require('./api/RobotApi'), require('./api/Robotv1Api'), require('./api/ScanApi'), require('./api/ScanAllApi'), require('./api/ScannersApi'), require('./api/SystemApi'), require('./api/SysteminfoApi'));
  }
}(function(ApiClient, Access, AdditionLink, AdditionLinks, Annotations, Artifact, AuditLog, AuthproxySetting, BadRequestFormatedError, BoolConfigItem, CVEAllowlist, CVEAllowlistItem, ChartAPIError, ChartMetadata, ChartVersion, CliSecretInput, ComponentHealthStatus, ComponentOverviewEntry, Configurations, ConfigurationsResponse, ConflictFormatedError, EmailServerSetting, Error, Errors, EventType, Execution, ExtraAttrs, FilterStyle, ForbiddenChartAPIError, GCHistory, GeneralInfo, Icon, ImmutableRule, ImmutableSelector, Instance, InsufficientStorageChartAPIError, IntegerConfigItem, InternalChartAPIError, IsDefault, Label, Labels, LdapConf, LdapFailedImportUsers, LdapImportUsers, LdapUsers, Metadata, Metrics, Namespace, NativeReportSummary, NotFoundChartAPIError, NotifyType, OverallHealthStatus, Password, Permission, PingEndpoint, PingRegistry, Platform, PreheatPolicy, Project, ProjectDeletable, ProjectMember, ProjectMemberEntity, ProjectMetadata, ProjectReq, ProjectScanner, ProjectSummary, ProviderUnderProject, PutRegistry, Quota, QuotaRefObject, QuotaSwitcher, QuotaUpdateReq, Reference, Registry, RegistryCredential, RegistryInfo, ReplicationExecution, ReplicationFilter, ReplicationPolicy, ReplicationTask, ReplicationTrigger, Repository, ResourceList, RetentionExecution, RetentionExecutionStop, RetentionExecutionTask, RetentionExecutionTrigger, RetentionMetadata, RetentionPolicy, RetentionPolicyScope, RetentionRule, RetentionRuleMetadata, RetentionRuleParamMetadata, RetentionRuleTrigger, RetentionSelector, RetentionSelectorMetadata, Robot, RobotCreate, RobotCreateV1, RobotCreated, RobotPermission, RobotSec, Role, RoleParam, RoleRequest, ScanOverview, Scanner, ScannerAdapterMetadata, ScannerCapability, ScannerRegistration, ScannerRegistrationReq, ScannerRegistrationSettings, Schedule, ScheduleObj, Search, SearchRepository, SearchResult, StartReplicationExecution, StatisticMap, Stats, Storage, StringConfigItem, SupportedWebhookEventTypes, SysAdminFlag, SystemInfo, Tag, Task, TriggerSettings, UnauthorizedChartAPIError, User, UserEntity, UserGroup, UserProfile, UserSearch, VulnerabilitySummary, WebhookJob, WebhookLastTrigger, WebhookPolicy, WebhookTargetObject, ArtifactApi, AuditlogApi, ChartRepositoryApi, GcApi, IconApi, LabelApi, PingApi, PreheatApi, ProductsApi, ProjectApi, QuotaApi, ReplicationApi, RepositoryApi, RetentionApi, RobotApi, Robotv1Api, ScanApi, ScanAllApi, ScannersApi, SystemApi, SysteminfoApi) {
  'use strict';

  /**
   * These_APIs_provide_services_for_manipulating_Harbor_project_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var HarborApi = require('index'); // See note below*.
   * var xxxSvc = new HarborApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new HarborApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new HarborApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new HarborApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 2.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Access model constructor.
     * @property {module:model/Access}
     */
    Access: Access,
    /**
     * The AdditionLink model constructor.
     * @property {module:model/AdditionLink}
     */
    AdditionLink: AdditionLink,
    /**
     * The AdditionLinks model constructor.
     * @property {module:model/AdditionLinks}
     */
    AdditionLinks: AdditionLinks,
    /**
     * The Annotations model constructor.
     * @property {module:model/Annotations}
     */
    Annotations: Annotations,
    /**
     * The Artifact model constructor.
     * @property {module:model/Artifact}
     */
    Artifact: Artifact,
    /**
     * The AuditLog model constructor.
     * @property {module:model/AuditLog}
     */
    AuditLog: AuditLog,
    /**
     * The AuthproxySetting model constructor.
     * @property {module:model/AuthproxySetting}
     */
    AuthproxySetting: AuthproxySetting,
    /**
     * The BadRequestFormatedError model constructor.
     * @property {module:model/BadRequestFormatedError}
     */
    BadRequestFormatedError: BadRequestFormatedError,
    /**
     * The BoolConfigItem model constructor.
     * @property {module:model/BoolConfigItem}
     */
    BoolConfigItem: BoolConfigItem,
    /**
     * The CVEAllowlist model constructor.
     * @property {module:model/CVEAllowlist}
     */
    CVEAllowlist: CVEAllowlist,
    /**
     * The CVEAllowlistItem model constructor.
     * @property {module:model/CVEAllowlistItem}
     */
    CVEAllowlistItem: CVEAllowlistItem,
    /**
     * The ChartAPIError model constructor.
     * @property {module:model/ChartAPIError}
     */
    ChartAPIError: ChartAPIError,
    /**
     * The ChartMetadata model constructor.
     * @property {module:model/ChartMetadata}
     */
    ChartMetadata: ChartMetadata,
    /**
     * The ChartVersion model constructor.
     * @property {module:model/ChartVersion}
     */
    ChartVersion: ChartVersion,
    /**
     * The CliSecretInput model constructor.
     * @property {module:model/CliSecretInput}
     */
    CliSecretInput: CliSecretInput,
    /**
     * The ComponentHealthStatus model constructor.
     * @property {module:model/ComponentHealthStatus}
     */
    ComponentHealthStatus: ComponentHealthStatus,
    /**
     * The ComponentOverviewEntry model constructor.
     * @property {module:model/ComponentOverviewEntry}
     */
    ComponentOverviewEntry: ComponentOverviewEntry,
    /**
     * The Configurations model constructor.
     * @property {module:model/Configurations}
     */
    Configurations: Configurations,
    /**
     * The ConfigurationsResponse model constructor.
     * @property {module:model/ConfigurationsResponse}
     */
    ConfigurationsResponse: ConfigurationsResponse,
    /**
     * The ConflictFormatedError model constructor.
     * @property {module:model/ConflictFormatedError}
     */
    ConflictFormatedError: ConflictFormatedError,
    /**
     * The EmailServerSetting model constructor.
     * @property {module:model/EmailServerSetting}
     */
    EmailServerSetting: EmailServerSetting,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The Errors model constructor.
     * @property {module:model/Errors}
     */
    Errors: Errors,
    /**
     * The EventType model constructor.
     * @property {module:model/EventType}
     */
    EventType: EventType,
    /**
     * The Execution model constructor.
     * @property {module:model/Execution}
     */
    Execution: Execution,
    /**
     * The ExtraAttrs model constructor.
     * @property {module:model/ExtraAttrs}
     */
    ExtraAttrs: ExtraAttrs,
    /**
     * The FilterStyle model constructor.
     * @property {module:model/FilterStyle}
     */
    FilterStyle: FilterStyle,
    /**
     * The ForbiddenChartAPIError model constructor.
     * @property {module:model/ForbiddenChartAPIError}
     */
    ForbiddenChartAPIError: ForbiddenChartAPIError,
    /**
     * The GCHistory model constructor.
     * @property {module:model/GCHistory}
     */
    GCHistory: GCHistory,
    /**
     * The GeneralInfo model constructor.
     * @property {module:model/GeneralInfo}
     */
    GeneralInfo: GeneralInfo,
    /**
     * The Icon model constructor.
     * @property {module:model/Icon}
     */
    Icon: Icon,
    /**
     * The ImmutableRule model constructor.
     * @property {module:model/ImmutableRule}
     */
    ImmutableRule: ImmutableRule,
    /**
     * The ImmutableSelector model constructor.
     * @property {module:model/ImmutableSelector}
     */
    ImmutableSelector: ImmutableSelector,
    /**
     * The Instance model constructor.
     * @property {module:model/Instance}
     */
    Instance: Instance,
    /**
     * The InsufficientStorageChartAPIError model constructor.
     * @property {module:model/InsufficientStorageChartAPIError}
     */
    InsufficientStorageChartAPIError: InsufficientStorageChartAPIError,
    /**
     * The IntegerConfigItem model constructor.
     * @property {module:model/IntegerConfigItem}
     */
    IntegerConfigItem: IntegerConfigItem,
    /**
     * The InternalChartAPIError model constructor.
     * @property {module:model/InternalChartAPIError}
     */
    InternalChartAPIError: InternalChartAPIError,
    /**
     * The IsDefault model constructor.
     * @property {module:model/IsDefault}
     */
    IsDefault: IsDefault,
    /**
     * The Label model constructor.
     * @property {module:model/Label}
     */
    Label: Label,
    /**
     * The Labels model constructor.
     * @property {module:model/Labels}
     */
    Labels: Labels,
    /**
     * The LdapConf model constructor.
     * @property {module:model/LdapConf}
     */
    LdapConf: LdapConf,
    /**
     * The LdapFailedImportUsers model constructor.
     * @property {module:model/LdapFailedImportUsers}
     */
    LdapFailedImportUsers: LdapFailedImportUsers,
    /**
     * The LdapImportUsers model constructor.
     * @property {module:model/LdapImportUsers}
     */
    LdapImportUsers: LdapImportUsers,
    /**
     * The LdapUsers model constructor.
     * @property {module:model/LdapUsers}
     */
    LdapUsers: LdapUsers,
    /**
     * The Metadata model constructor.
     * @property {module:model/Metadata}
     */
    Metadata: Metadata,
    /**
     * The Metrics model constructor.
     * @property {module:model/Metrics}
     */
    Metrics: Metrics,
    /**
     * The Namespace model constructor.
     * @property {module:model/Namespace}
     */
    Namespace: Namespace,
    /**
     * The NativeReportSummary model constructor.
     * @property {module:model/NativeReportSummary}
     */
    NativeReportSummary: NativeReportSummary,
    /**
     * The NotFoundChartAPIError model constructor.
     * @property {module:model/NotFoundChartAPIError}
     */
    NotFoundChartAPIError: NotFoundChartAPIError,
    /**
     * The NotifyType model constructor.
     * @property {module:model/NotifyType}
     */
    NotifyType: NotifyType,
    /**
     * The OverallHealthStatus model constructor.
     * @property {module:model/OverallHealthStatus}
     */
    OverallHealthStatus: OverallHealthStatus,
    /**
     * The Password model constructor.
     * @property {module:model/Password}
     */
    Password: Password,
    /**
     * The Permission model constructor.
     * @property {module:model/Permission}
     */
    Permission: Permission,
    /**
     * The PingEndpoint model constructor.
     * @property {module:model/PingEndpoint}
     */
    PingEndpoint: PingEndpoint,
    /**
     * The PingRegistry model constructor.
     * @property {module:model/PingRegistry}
     */
    PingRegistry: PingRegistry,
    /**
     * The Platform model constructor.
     * @property {module:model/Platform}
     */
    Platform: Platform,
    /**
     * The PreheatPolicy model constructor.
     * @property {module:model/PreheatPolicy}
     */
    PreheatPolicy: PreheatPolicy,
    /**
     * The Project model constructor.
     * @property {module:model/Project}
     */
    Project: Project,
    /**
     * The ProjectDeletable model constructor.
     * @property {module:model/ProjectDeletable}
     */
    ProjectDeletable: ProjectDeletable,
    /**
     * The ProjectMember model constructor.
     * @property {module:model/ProjectMember}
     */
    ProjectMember: ProjectMember,
    /**
     * The ProjectMemberEntity model constructor.
     * @property {module:model/ProjectMemberEntity}
     */
    ProjectMemberEntity: ProjectMemberEntity,
    /**
     * The ProjectMetadata model constructor.
     * @property {module:model/ProjectMetadata}
     */
    ProjectMetadata: ProjectMetadata,
    /**
     * The ProjectReq model constructor.
     * @property {module:model/ProjectReq}
     */
    ProjectReq: ProjectReq,
    /**
     * The ProjectScanner model constructor.
     * @property {module:model/ProjectScanner}
     */
    ProjectScanner: ProjectScanner,
    /**
     * The ProjectSummary model constructor.
     * @property {module:model/ProjectSummary}
     */
    ProjectSummary: ProjectSummary,
    /**
     * The ProviderUnderProject model constructor.
     * @property {module:model/ProviderUnderProject}
     */
    ProviderUnderProject: ProviderUnderProject,
    /**
     * The PutRegistry model constructor.
     * @property {module:model/PutRegistry}
     */
    PutRegistry: PutRegistry,
    /**
     * The Quota model constructor.
     * @property {module:model/Quota}
     */
    Quota: Quota,
    /**
     * The QuotaRefObject model constructor.
     * @property {module:model/QuotaRefObject}
     */
    QuotaRefObject: QuotaRefObject,
    /**
     * The QuotaSwitcher model constructor.
     * @property {module:model/QuotaSwitcher}
     */
    QuotaSwitcher: QuotaSwitcher,
    /**
     * The QuotaUpdateReq model constructor.
     * @property {module:model/QuotaUpdateReq}
     */
    QuotaUpdateReq: QuotaUpdateReq,
    /**
     * The Reference model constructor.
     * @property {module:model/Reference}
     */
    Reference: Reference,
    /**
     * The Registry model constructor.
     * @property {module:model/Registry}
     */
    Registry: Registry,
    /**
     * The RegistryCredential model constructor.
     * @property {module:model/RegistryCredential}
     */
    RegistryCredential: RegistryCredential,
    /**
     * The RegistryInfo model constructor.
     * @property {module:model/RegistryInfo}
     */
    RegistryInfo: RegistryInfo,
    /**
     * The ReplicationExecution model constructor.
     * @property {module:model/ReplicationExecution}
     */
    ReplicationExecution: ReplicationExecution,
    /**
     * The ReplicationFilter model constructor.
     * @property {module:model/ReplicationFilter}
     */
    ReplicationFilter: ReplicationFilter,
    /**
     * The ReplicationPolicy model constructor.
     * @property {module:model/ReplicationPolicy}
     */
    ReplicationPolicy: ReplicationPolicy,
    /**
     * The ReplicationTask model constructor.
     * @property {module:model/ReplicationTask}
     */
    ReplicationTask: ReplicationTask,
    /**
     * The ReplicationTrigger model constructor.
     * @property {module:model/ReplicationTrigger}
     */
    ReplicationTrigger: ReplicationTrigger,
    /**
     * The Repository model constructor.
     * @property {module:model/Repository}
     */
    Repository: Repository,
    /**
     * The ResourceList model constructor.
     * @property {module:model/ResourceList}
     */
    ResourceList: ResourceList,
    /**
     * The RetentionExecution model constructor.
     * @property {module:model/RetentionExecution}
     */
    RetentionExecution: RetentionExecution,
    /**
     * The RetentionExecutionStop model constructor.
     * @property {module:model/RetentionExecutionStop}
     */
    RetentionExecutionStop: RetentionExecutionStop,
    /**
     * The RetentionExecutionTask model constructor.
     * @property {module:model/RetentionExecutionTask}
     */
    RetentionExecutionTask: RetentionExecutionTask,
    /**
     * The RetentionExecutionTrigger model constructor.
     * @property {module:model/RetentionExecutionTrigger}
     */
    RetentionExecutionTrigger: RetentionExecutionTrigger,
    /**
     * The RetentionMetadata model constructor.
     * @property {module:model/RetentionMetadata}
     */
    RetentionMetadata: RetentionMetadata,
    /**
     * The RetentionPolicy model constructor.
     * @property {module:model/RetentionPolicy}
     */
    RetentionPolicy: RetentionPolicy,
    /**
     * The RetentionPolicyScope model constructor.
     * @property {module:model/RetentionPolicyScope}
     */
    RetentionPolicyScope: RetentionPolicyScope,
    /**
     * The RetentionRule model constructor.
     * @property {module:model/RetentionRule}
     */
    RetentionRule: RetentionRule,
    /**
     * The RetentionRuleMetadata model constructor.
     * @property {module:model/RetentionRuleMetadata}
     */
    RetentionRuleMetadata: RetentionRuleMetadata,
    /**
     * The RetentionRuleParamMetadata model constructor.
     * @property {module:model/RetentionRuleParamMetadata}
     */
    RetentionRuleParamMetadata: RetentionRuleParamMetadata,
    /**
     * The RetentionRuleTrigger model constructor.
     * @property {module:model/RetentionRuleTrigger}
     */
    RetentionRuleTrigger: RetentionRuleTrigger,
    /**
     * The RetentionSelector model constructor.
     * @property {module:model/RetentionSelector}
     */
    RetentionSelector: RetentionSelector,
    /**
     * The RetentionSelectorMetadata model constructor.
     * @property {module:model/RetentionSelectorMetadata}
     */
    RetentionSelectorMetadata: RetentionSelectorMetadata,
    /**
     * The Robot model constructor.
     * @property {module:model/Robot}
     */
    Robot: Robot,
    /**
     * The RobotCreate model constructor.
     * @property {module:model/RobotCreate}
     */
    RobotCreate: RobotCreate,
    /**
     * The RobotCreateV1 model constructor.
     * @property {module:model/RobotCreateV1}
     */
    RobotCreateV1: RobotCreateV1,
    /**
     * The RobotCreated model constructor.
     * @property {module:model/RobotCreated}
     */
    RobotCreated: RobotCreated,
    /**
     * The RobotPermission model constructor.
     * @property {module:model/RobotPermission}
     */
    RobotPermission: RobotPermission,
    /**
     * The RobotSec model constructor.
     * @property {module:model/RobotSec}
     */
    RobotSec: RobotSec,
    /**
     * The Role model constructor.
     * @property {module:model/Role}
     */
    Role: Role,
    /**
     * The RoleParam model constructor.
     * @property {module:model/RoleParam}
     */
    RoleParam: RoleParam,
    /**
     * The RoleRequest model constructor.
     * @property {module:model/RoleRequest}
     */
    RoleRequest: RoleRequest,
    /**
     * The ScanOverview model constructor.
     * @property {module:model/ScanOverview}
     */
    ScanOverview: ScanOverview,
    /**
     * The Scanner model constructor.
     * @property {module:model/Scanner}
     */
    Scanner: Scanner,
    /**
     * The ScannerAdapterMetadata model constructor.
     * @property {module:model/ScannerAdapterMetadata}
     */
    ScannerAdapterMetadata: ScannerAdapterMetadata,
    /**
     * The ScannerCapability model constructor.
     * @property {module:model/ScannerCapability}
     */
    ScannerCapability: ScannerCapability,
    /**
     * The ScannerRegistration model constructor.
     * @property {module:model/ScannerRegistration}
     */
    ScannerRegistration: ScannerRegistration,
    /**
     * The ScannerRegistrationReq model constructor.
     * @property {module:model/ScannerRegistrationReq}
     */
    ScannerRegistrationReq: ScannerRegistrationReq,
    /**
     * The ScannerRegistrationSettings model constructor.
     * @property {module:model/ScannerRegistrationSettings}
     */
    ScannerRegistrationSettings: ScannerRegistrationSettings,
    /**
     * The Schedule model constructor.
     * @property {module:model/Schedule}
     */
    Schedule: Schedule,
    /**
     * The ScheduleObj model constructor.
     * @property {module:model/ScheduleObj}
     */
    ScheduleObj: ScheduleObj,
    /**
     * The Search model constructor.
     * @property {module:model/Search}
     */
    Search: Search,
    /**
     * The SearchRepository model constructor.
     * @property {module:model/SearchRepository}
     */
    SearchRepository: SearchRepository,
    /**
     * The SearchResult model constructor.
     * @property {module:model/SearchResult}
     */
    SearchResult: SearchResult,
    /**
     * The StartReplicationExecution model constructor.
     * @property {module:model/StartReplicationExecution}
     */
    StartReplicationExecution: StartReplicationExecution,
    /**
     * The StatisticMap model constructor.
     * @property {module:model/StatisticMap}
     */
    StatisticMap: StatisticMap,
    /**
     * The Stats model constructor.
     * @property {module:model/Stats}
     */
    Stats: Stats,
    /**
     * The Storage model constructor.
     * @property {module:model/Storage}
     */
    Storage: Storage,
    /**
     * The StringConfigItem model constructor.
     * @property {module:model/StringConfigItem}
     */
    StringConfigItem: StringConfigItem,
    /**
     * The SupportedWebhookEventTypes model constructor.
     * @property {module:model/SupportedWebhookEventTypes}
     */
    SupportedWebhookEventTypes: SupportedWebhookEventTypes,
    /**
     * The SysAdminFlag model constructor.
     * @property {module:model/SysAdminFlag}
     */
    SysAdminFlag: SysAdminFlag,
    /**
     * The SystemInfo model constructor.
     * @property {module:model/SystemInfo}
     */
    SystemInfo: SystemInfo,
    /**
     * The Tag model constructor.
     * @property {module:model/Tag}
     */
    Tag: Tag,
    /**
     * The Task model constructor.
     * @property {module:model/Task}
     */
    Task: Task,
    /**
     * The TriggerSettings model constructor.
     * @property {module:model/TriggerSettings}
     */
    TriggerSettings: TriggerSettings,
    /**
     * The UnauthorizedChartAPIError model constructor.
     * @property {module:model/UnauthorizedChartAPIError}
     */
    UnauthorizedChartAPIError: UnauthorizedChartAPIError,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The UserEntity model constructor.
     * @property {module:model/UserEntity}
     */
    UserEntity: UserEntity,
    /**
     * The UserGroup model constructor.
     * @property {module:model/UserGroup}
     */
    UserGroup: UserGroup,
    /**
     * The UserProfile model constructor.
     * @property {module:model/UserProfile}
     */
    UserProfile: UserProfile,
    /**
     * The UserSearch model constructor.
     * @property {module:model/UserSearch}
     */
    UserSearch: UserSearch,
    /**
     * The VulnerabilitySummary model constructor.
     * @property {module:model/VulnerabilitySummary}
     */
    VulnerabilitySummary: VulnerabilitySummary,
    /**
     * The WebhookJob model constructor.
     * @property {module:model/WebhookJob}
     */
    WebhookJob: WebhookJob,
    /**
     * The WebhookLastTrigger model constructor.
     * @property {module:model/WebhookLastTrigger}
     */
    WebhookLastTrigger: WebhookLastTrigger,
    /**
     * The WebhookPolicy model constructor.
     * @property {module:model/WebhookPolicy}
     */
    WebhookPolicy: WebhookPolicy,
    /**
     * The WebhookTargetObject model constructor.
     * @property {module:model/WebhookTargetObject}
     */
    WebhookTargetObject: WebhookTargetObject,
    /**
     * The ArtifactApi service constructor.
     * @property {module:api/ArtifactApi}
     */
    ArtifactApi: ArtifactApi,
    /**
     * The AuditlogApi service constructor.
     * @property {module:api/AuditlogApi}
     */
    AuditlogApi: AuditlogApi,
    /**
     * The ChartRepositoryApi service constructor.
     * @property {module:api/ChartRepositoryApi}
     */
    ChartRepositoryApi: ChartRepositoryApi,
    /**
     * The GcApi service constructor.
     * @property {module:api/GcApi}
     */
    GcApi: GcApi,
    /**
     * The IconApi service constructor.
     * @property {module:api/IconApi}
     */
    IconApi: IconApi,
    /**
     * The LabelApi service constructor.
     * @property {module:api/LabelApi}
     */
    LabelApi: LabelApi,
    /**
     * The PingApi service constructor.
     * @property {module:api/PingApi}
     */
    PingApi: PingApi,
    /**
     * The PreheatApi service constructor.
     * @property {module:api/PreheatApi}
     */
    PreheatApi: PreheatApi,
    /**
     * The ProductsApi service constructor.
     * @property {module:api/ProductsApi}
     */
    ProductsApi: ProductsApi,
    /**
     * The ProjectApi service constructor.
     * @property {module:api/ProjectApi}
     */
    ProjectApi: ProjectApi,
    /**
     * The QuotaApi service constructor.
     * @property {module:api/QuotaApi}
     */
    QuotaApi: QuotaApi,
    /**
     * The ReplicationApi service constructor.
     * @property {module:api/ReplicationApi}
     */
    ReplicationApi: ReplicationApi,
    /**
     * The RepositoryApi service constructor.
     * @property {module:api/RepositoryApi}
     */
    RepositoryApi: RepositoryApi,
    /**
     * The RetentionApi service constructor.
     * @property {module:api/RetentionApi}
     */
    RetentionApi: RetentionApi,
    /**
     * The RobotApi service constructor.
     * @property {module:api/RobotApi}
     */
    RobotApi: RobotApi,
    /**
     * The Robotv1Api service constructor.
     * @property {module:api/Robotv1Api}
     */
    Robotv1Api: Robotv1Api,
    /**
     * The ScanApi service constructor.
     * @property {module:api/ScanApi}
     */
    ScanApi: ScanApi,
    /**
     * The ScanAllApi service constructor.
     * @property {module:api/ScanAllApi}
     */
    ScanAllApi: ScanAllApi,
    /**
     * The ScannersApi service constructor.
     * @property {module:api/ScannersApi}
     */
    ScannersApi: ScannersApi,
    /**
     * The SystemApi service constructor.
     * @property {module:api/SystemApi}
     */
    SystemApi: SystemApi,
    /**
     * The SysteminfoApi service constructor.
     * @property {module:api/SysteminfoApi}
     */
    SysteminfoApi: SysteminfoApi
  };

  return exports;
}));
